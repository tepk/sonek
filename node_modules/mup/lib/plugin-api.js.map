{"version":3,"sources":["../src/plugin-api.js"],"names":["swarmUtils","utils","resolvePath","moduleNotFoundIsPath","log","PluginAPI","base","filteredArgs","program","_runHooks","handlers","hookName","messagePrefix","hookHandler","localCommand","console","_runHookScript","method","nodemiral","_commandErrorHandler","remoteCommand","getConfig","servers","_runPreHooks","name","chalk","yellow","hooks","hookList","_runPostHooks","commandName","runCommand","Error","commands","commandHistory","push","potentialPromise","handler","e","then","config","path","dirname","args","_origionalConfig","settings","sessions","_enabledSessions","split","configPath","join","settingsPath","verbose","validationErrors","runTaskList","getDockerLogs","runSSHCommand","_createSSHOptions","createSSHOptions","contents","fs","readFileSync","getBasePath","meteor","toString","regex","RegExp","test","length","errors","depreciations","problems","app","Object","assign","type","validate","require","cache","resolve","code","error","red","process","exit","_normalizeConfig","validateConfig","filePath","getSettingsFromPath","forEach","text","message","newConfig","script","childProcess","execSync","cwd","stdio","exitCode","nodemiralHistory","Array","stack","solution","selectedServers","collectors","_cachedServerInfo","values","result","modules","_pickSessions","keys","map","_loadSessions","currentSwarmManagers","managers","getSessionsForServers","plugins","moduleConfig","moduleName","hasOwnProperty","indexOf","info","auth","username","opts","ssh","sshAgent","env","SSH_AUTH_SOCK","keepaliveInterval","keepaliveCountMax","pem","password","existsSync","agent","session","host","getServerInfo","currentManagers","desiredManagers","nodes","findNodes","nodeIdsToServer","desiredLabels","labels","currentLabels","nodeIDs"],"mappings":"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","file":"plugin-api.js","sourcesContent":["import * as swarmUtils from './swarm-utils';\nimport * as utils from './utils';\nimport configValidator, { showDepreciations, showErrors } from './validate/index';\nimport { hooks, runRemoteHooks } from './hooks';\nimport chalk from 'chalk';\nimport childProcess from 'child_process';\nimport { cloneDeep } from 'lodash';\nimport { commands } from './commands';\nimport debug from 'debug';\nimport fs from 'fs';\nimport { getOptions } from './swarm-options';\nimport nodemiral from 'nodemiral';\nimport parseJson from 'parse-json';\nimport path from 'path';\nimport { runConfigPreps } from './prepare-config';\nimport { scrubConfig } from './scrub-config';\nimport serverInfo from './server-info';\n\nconst { resolvePath, moduleNotFoundIsPath } = utils;\nconst log = debug('mup:api');\n\nexport default class PluginAPI {\n  constructor(base, filteredArgs, program) {\n    this.base = program.config ? path.dirname(program.config) : base;\n    this.args = filteredArgs;\n    this._origionalConfig = null;\n    this.config = null;\n    this.settings = null;\n    this.sessions = null;\n    this._enabledSessions = program.servers ? program.servers.split(',') : [];\n    this.configPath = program.config ? resolvePath(program.config) : path.join(this.base, 'mup.js');\n    this.settingsPath = program.settings;\n    this.verbose = program.verbose;\n    this.program = program;\n    this.commandHistory = [];\n\n    this.validationErrors = [];\n\n    this.resolvePath = utils.resolvePath;\n    this.runTaskList = utils.runTaskList;\n    this.getDockerLogs = utils.getDockerLogs;\n    this.runSSHCommand = utils.runSSHCommand;\n    this._createSSHOptions = utils.createSSHOptions;\n  }\n\n  getArgs() {\n    return this.args;\n  }\n\n  getBasePath() {\n    return this.base;\n  }\n\n  getVerbose() {\n    return this.verbose;\n  }\n\n  getOptions() {\n    return this.program;\n  }\n\n  hasMeteorPackage(name) {\n    // Check if app is using the package\n    try {\n      const contents = fs\n        .readFileSync(resolvePath(this.getBasePath(), this.getConfig().meteor.path, '.meteor/versions'))\n        .toString();\n      // Looks for \"package-name@\" in the beginning of a\n      // line or at the start of the file\n      const regex = new RegExp(`(^|\\\\s)${name}@`, 'm');\n\n      return regex.test(contents);\n    } catch (e) {\n      console.log(`Unable to load file ${resolvePath(this.getBasePath(), this.getConfig().meteor.path, '.meteor/versions')}`);\n\n      return false;\n    }\n  }\n\n  validateConfig(configPath) {\n    // Only print errors once.\n    if (this.validationErrors.length > 0) {\n      return this.validationErrors;\n    }\n    const config = this.getConfig();\n    const {\n      errors,\n      depreciations\n    } = configValidator(config, this._origionalConfig);\n    const problems = [...errors, ...depreciations];\n\n    if (problems.length > 0) {\n      console.log(`loaded config from ${configPath}`);\n      console.log('');\n\n      if (errors.length) {\n        showErrors(errors);\n      }\n\n      if (depreciations.length) {\n        showDepreciations(depreciations);\n      }\n\n      console.log(\n        'Read the docs and view example configs at'\n      );\n      console.log('    http://meteor-up.com/docs');\n      console.log('');\n    }\n\n    this.validationErrors = problems;\n\n    return problems;\n  }\n  _normalizeConfig(config) {\n    if (typeof config !== 'object') {\n      return config;\n    }\n    if (config.meteor && typeof config.app !== 'object') {\n      config.app = Object.assign({}, config.meteor);\n      config.app.type = 'meteor';\n    } else if (typeof config.app === 'object' && !('type' in config.app)) {\n      config.app.type = 'meteor';\n    }\n\n    return runConfigPreps(config);\n  }\n  getConfig(validate = true) {\n    if (!this.config) {\n      try {\n        delete require.cache[require.resolve(this.configPath)];\n        // eslint-disable-next-line global-require\n        this.config = require(this.configPath);\n        this._origionalConfig = cloneDeep(this.config);\n      } catch (e) {\n        if (!validate) {\n          return {};\n        }\n        if (e.code === 'MODULE_NOT_FOUND' && moduleNotFoundIsPath(e, this.configPath)) {\n          console.error('\"mup.js\" file not found at');\n          console.error(`  ${this.configPath}`);\n          console.error('Run \"mup init\" to create it.');\n        } else {\n          console.error(chalk.red('Error loading config file:'));\n          console.error(e);\n        }\n        process.exit(1);\n      }\n      this.config = this._normalizeConfig(this.config);\n\n      if (validate) {\n        this.validateConfig(this.configPath);\n      }\n    }\n\n    return this.config;\n  }\n\n  scrubConfig() {\n    const config = this.getConfig();\n\n    return scrubConfig(config);\n  }\n\n  getSettings() {\n    if (!this.settings) {\n      let filePath;\n      if (this.settingsPath) {\n        filePath = resolvePath(this.settingsPath);\n      } else {\n        filePath = path.join(this.base, 'settings.json');\n      }\n      this.settings = this.getSettingsFromPath(filePath);\n    }\n\n    return this.settings;\n  }\n\n  getSettingsFromPath(settingsPath) {\n    const filePath = resolvePath(settingsPath);\n    let settings;\n    try {\n      settings = fs.readFileSync(filePath).toString();\n    } catch (e) {\n      console.log(`Unable to load settings.json at ${filePath}`);\n      if (e.code !== 'ENOENT') {\n        console.log(e);\n      } else {\n        [\n          'It does not exist.',\n          '',\n          'You can create the file with \"mup init\" or add the option',\n          '\"--settings path/to/settings.json\" to load it from a',\n          'different location.'\n        ].forEach(text => console.log(text));\n      }\n      process.exit(1);\n    }\n    try {\n      settings = parseJson(settings);\n    } catch (e) {\n      console.log('Error parsing settings file:');\n      console.log(e.message);\n\n      process.exit(1);\n    }\n\n    return settings;\n  }\n\n  setConfig(newConfig) {\n    this.config = newConfig;\n  }\n\n  _runHookScript(script) {\n    try {\n      childProcess.execSync(script, {\n        cwd: this.getBasePath(),\n        stdio: 'inherit'\n      });\n    } catch (e) {\n      console.log('Hook failed.');\n      process.exit(1);\n    }\n  }\n  _runHooks = async function(handlers, hookName) {\n    const messagePrefix = `> Running hook ${hookName}`;\n    for (const hookHandler of handlers) {\n      if (hookHandler.localCommand) {\n        console.log(`${messagePrefix} \"${hookHandler.localCommand}\"`);\n        this._runHookScript(hookHandler.localCommand);\n      }\n      if (typeof hookHandler.method === 'function') {\n        try {\n          await hookHandler.method(this, nodemiral);\n        } catch (e) {\n          this._commandErrorHandler(e);\n        }\n      }\n      if (hookHandler.remoteCommand) {\n        console.log(\n          `${messagePrefix} remote command \"${hookHandler.remoteCommand}\"`\n        );\n        await runRemoteHooks(\n          this.getConfig().servers,\n          hookHandler.remoteCommand\n        );\n      }\n    }\n  }\n  _runPreHooks = async function(name) {\n    const hookName = `pre.${name}`;\n\n    if (this.program['show-hook-names']) {\n      console.log(chalk.yellow(`Hook: ${hookName}`));\n    }\n\n    if (hookName in hooks) {\n      const hookList = hooks[hookName];\n      await this._runHooks(hookList, name);\n    }\n  };\n  _runPostHooks = async function(commandName) {\n    const hookName = `post.${commandName}`;\n\n    if (this.program['show-hook-names']) {\n      console.log(chalk.yellow(`Hook: ${hookName}`));\n    }\n\n    if (hookName in hooks) {\n      const hookList = hooks[hookName];\n      await this._runHooks(hookList, hookName);\n    }\n  };\n  _commandErrorHandler(e) {\n    log('_commandErrorHandler');\n    process.exitCode = 1;\n\n    // Only show error when not from nodemiral\n    // since nodemiral would have already shown the error\n    if (!(e.nodemiralHistory instanceof Array)) {\n      log('_commandErrorHandler: nodemiral error');\n      console.error(e.stack || e);\n    }\n\n    if (e.solution) {\n      console.log(chalk.yellow(e.solution));\n    }\n\n    process.exit(1);\n  }\n  runCommand = async function(name) {\n    if (!name) {\n      throw new Error('Command name is required');\n    }\n\n    if (!(name in commands)) {\n      throw new Error(`Unknown command name: ${name}`);\n    }\n\n    this.commandHistory.push({ name });\n\n    await this._runPreHooks(name);\n    let potentialPromise;\n    try {\n      log('Running command', name);\n      potentialPromise = commands[name].handler(this, nodemiral);\n    } catch (e) {\n      this._commandErrorHandler(e);\n    }\n\n    if (potentialPromise && typeof potentialPromise.then === 'function') {\n      return potentialPromise\n        .then(() => this._runPostHooks(name));\n    }\n\n    return await this._runPostHooks(name);\n  }\n\n  async getServerInfo(selectedServers, collectors) {\n    if (this._cachedServerInfo && !collectors) {\n      return this._cachedServerInfo;\n    }\n\n    const servers = selectedServers ||\n      Object.values(this.getConfig().servers);\n\n    if (!collectors) {\n      console.log('=> Collecting Docker information');\n    }\n\n    const result = await serverInfo(servers, collectors);\n    if (!collectors) {\n      this._cachedServerInfo = result;\n    }\n\n    return result;\n  }\n\n  serverInfoStale() {\n    this._cachedServerInfo = null;\n  }\n\n  getSessions(modules = []) {\n    const sessions = this._pickSessions(modules);\n\n    return Object.keys(sessions).map(name => sessions[name]);\n  }\n\n  getSessionsForServers(servers = []) {\n    if (!this.sessions) {\n      this._loadSessions();\n    }\n\n    return servers.map(name => this.sessions[name]);\n  }\n\n  async getManagerSession() {\n    const managers = await this.currentSwarmManagers();\n\n    return this.getSessionsForServers(managers)[0];\n  }\n\n  _pickSessions(plugins = []) {\n    if (!this.sessions) {\n      this._loadSessions();\n    }\n\n    const sessions = {};\n\n    plugins.forEach(moduleName => {\n      const moduleConfig = this.getConfig()[moduleName];\n      if (!moduleConfig) {\n        return;\n      }\n\n      for (const name in moduleConfig.servers) {\n        if (!moduleConfig.servers.hasOwnProperty(name)) {\n          continue;\n        }\n\n        if (this.sessions[name]) {\n          sessions[name] = this.sessions[name];\n        }\n      }\n    });\n\n    return sessions;\n  }\n\n  _loadSessions() {\n    const config = this.getConfig();\n    this.sessions = {};\n\n    // `mup.servers` contains login information for servers\n    // Use this information to create nodemiral sessions.\n    for (const name in config.servers) {\n      if (!config.servers.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (\n        this._enabledSessions.length > 0 &&\n        this._enabledSessions.indexOf(name) === -1\n      ) {\n        continue;\n      }\n\n      const info = config.servers[name];\n      const auth = {\n        username: info.username\n      };\n      const opts = {\n        ssh: info.opts || {}\n      };\n\n      const sshAgent = process.env.SSH_AUTH_SOCK;\n\n      opts.ssh.keepaliveInterval = opts.ssh.keepaliveInterval || 1000 * 28;\n      opts.ssh.keepaliveCountMax = opts.ssh.keepaliveCountMax || 12;\n\n      if (info.pem) {\n        try {\n          auth.pem = fs.readFileSync(resolvePath(info.pem), 'utf8');\n        } catch (e) {\n          console.error(`Unable to load pem at \"${resolvePath(info.pem)}\"`);\n          console.error(`for server \"${name}\"`);\n          if (e.code !== 'ENOENT') {\n            console.log(e);\n          }\n          process.exit(1);\n        }\n      } else if (info.password) {\n        auth.password = info.password;\n      } else if (sshAgent && fs.existsSync(sshAgent)) {\n        opts.ssh.agent = sshAgent;\n      } else {\n        console.error(\n          \"error: server %s doesn't have password, ssh-agent or pem\",\n          name\n        );\n        process.exit(1);\n      }\n\n      const session = nodemiral.session(info.host, auth, opts);\n      this.sessions[name] = session;\n    }\n  }\n\n  async swarmInfo() {\n    const info = await this.getServerInfo();\n    const currentManagers = swarmUtils.currentManagers(this.getConfig(), info);\n    const desiredManagers = swarmUtils.desiredManagers(this.getConfig(), info);\n    const nodes = swarmUtils.findNodes(this.getConfig(), info);\n    const nodeIdsToServer = swarmUtils.nodeIdsToServer(this.getConfig(), info);\n    const desiredLabels = getOptions(this.getConfig()).labels;\n    const currentLabels = swarmUtils.currentLabels(this.getConfig(), info);\n\n    return {\n      currentManagers,\n      desiredManagers,\n      nodes,\n      nodeIDs: nodeIdsToServer,\n      desiredLabels,\n      currentLabels\n    };\n  }\n}\n"]}