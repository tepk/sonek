{"version":3,"sources":["../src/scrub-config.js"],"names":["registerScrubber","scrubConfig","_configScrubbers","scrubber","push","utils","scrubUrl","url","protocol","auth","hostname","port","path","hash","href","domains","split","pop","forEach","_config","config"],"mappings":";;;;;;QAKgBA,gB,GAAAA,gB;QA4CAC,W,GAAAA,W;;AAjDhB;;AACA;;AAEO,IAAMC,8CAAmB,EAAzB;;AAEA,SAASF,gBAAT,CAA0BG,QAA1B,EAAoC;AACzCD,mBAAiBE,IAAjB,CAAsBD,QAAtB;AACD;;AAEM,IAAME,wBAAQ;AACnBC,UADmB,oBACVC,GADU,EACL;AAAA,iBAQR,gBAAMA,GAAN,CARQ;AAAA,QAEVC,QAFU,UAEVA,QAFU;AAAA,QAGVC,IAHU,UAGVA,IAHU;AAAA,QAIVC,QAJU,UAIVA,QAJU;AAAA,QAKVC,IALU,UAKVA,IALU;AAAA,QAMVC,IANU,UAMVA,IANU;AAAA,QAOVC,IAPU,UAOVA,IAPU;;AAUZ,QAAIC,OAAUN,QAAV,OAAJ;;AAEA,QAAIC,IAAJ,EAAU;AACRK,cAAQ,YAAR;AACD;;AAED,QAAMC,UAAUL,SAASM,KAAT,CAAe,GAAf,CAAhB;AACAD,YAAQE,GAAR;AACAF,YAAQE,GAAR;AACAF,YAAQG,OAAR,CAAgB,YAAM;AACpBJ,cAAQ,YAAR;AACD,KAFD;AAGAA,YAAQ,UAAR;;AAEA,QAAIH,IAAJ,EAAU;AACRG,oBAAYH,IAAZ;AACD;;AAED,QAAIC,QAAQA,SAAS,GAArB,EAA0B;AACxBE,cAAQF,IAAR;AACD;AACD,QAAIC,IAAJ,EAAU;AACRC,cAAQD,IAAR;AACD;;AAED,WAAOC,IAAP;AACD;AArCkB,CAAd;;AAwCA,SAASb,WAAT,CAAqBkB,OAArB,EAA8B;AACnC,MAAIC,SAAS,uBAAUD,OAAV,CAAb;AACAjB,mBAAiBgB,OAAjB,CAAyB,oBAAY;AACnCE,aAASjB,SAASiB,MAAT,EAAiBf,KAAjB,CAAT;AACD,GAFD;;AAIA,SAAOe,MAAP;AACD","file":"scrub-config.js","sourcesContent":["import { cloneDeep } from 'lodash';\nimport { parse } from 'url';\n\nexport const _configScrubbers = [];\n\nexport function registerScrubber(scrubber) {\n  _configScrubbers.push(scrubber);\n}\n\nexport const utils = {\n  scrubUrl(url) {\n    const {\n      protocol,\n      auth,\n      hostname,\n      port,\n      path,\n      hash\n    } = parse(url);\n\n    let href = `${protocol}//`;\n\n    if (auth) {\n      href += 'user:pass@';\n    }\n\n    const domains = hostname.split('.');\n    domains.pop();\n    domains.pop();\n    domains.forEach(() => {\n      href += 'subdomain.';\n    });\n    href += 'host.com';\n\n    if (port) {\n      href += `:${port}`;\n    }\n\n    if (path && path !== '/') {\n      href += path;\n    }\n    if (hash) {\n      href += hash;\n    }\n\n    return href;\n  }\n};\n\nexport function scrubConfig(_config) {\n  let config = cloneDeep(_config);\n  _configScrubbers.forEach(scrubber => {\n    config = scrubber(config, utils);\n  });\n\n  return config;\n}\n"]}