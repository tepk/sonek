{"version":3,"sources":["../src/hooks.js"],"names":["serversConfig","command","Promise","all","Object","values","map","server","then","output","console","log","host","catch","error","e","runRemoteHooks","registerHook","hooks","_hookName","_handler","hookName","handler","sections","split","method","push"],"mappings":";;;;;;;;qEA6BO,iBAA8BA,aAA9B,EAA6CC,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,6CACEC,QAAQC,GAAR,CAAYC,OAAOC,MAAP,CAAcL,aAAd,EAChBM,GADgB,CACZ;AAAA,qBAAU,0BAAcC,MAAd,EAAsBN,OAAtB,EACZO,IADY,CACP,iBAEA;AAAA,oBADJC,MACI,SADJA,MACI;;AACJC,wBAAQC,GAAR,qBAA8BJ,OAAOK,IAArC;AACAF,wBAAQC,GAAR,CAAYF,MAAZ;AACD,eANY,EAOZI,KAPY,CAON,aAAK;AACVH,wBAAQI,KAAR,yCAAoDb,OAApD;AACAS,wBAAQI,KAAR,CAAcC,CAAd;AACD,eAVY,CAAV;AAAA,aADY,CAAZ,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,c;;;;;QAtBNC,Y,GAAAA,Y;;AAPhB;;;;AAKO,IAAMC,wBAAQ,EAAd;;AAEA,SAASD,YAAT,CAAsBE,SAAtB,EAAiCC,QAAjC,EAA2C;AAChD,MAAIC,WAAWF,SAAf;AACA,MAAIG,UAAUF,QAAd;;AAEA,MAAI,4BAAgB,KAAhB,EAAuBC,QAAvB,MAAqC,CAAzC,EAA4C;AAC1C,QAAME,WAAWF,SAASG,KAAT,CAAe,GAAf,CAAjB;AACAH,eAAcE,SAAS,CAAT,CAAd,iBAAqCA,SAAS,CAAT,CAArC;AACD;;AAED,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCA,cAAU;AACRG,cAAQL;AADA,KAAV;AAGD;;AAED,MAAIC,YAAYH,KAAhB,EAAuB;AACrBA,UAAMG,QAAN,EAAgBK,IAAhB,CAAqBJ,OAArB;AACD,GAFD,MAEO;AACLJ,UAAMG,QAAN,IAAkB,CAACC,OAAD,CAAlB;AACD;AACF","file":"hooks.js","sourcesContent":["import {\n  countOccurences,\n  runSSHCommand\n} from './utils';\n\nexport const hooks = {};\n\nexport function registerHook(_hookName, _handler) {\n  let hookName = _hookName;\n  let handler = _handler;\n\n  if (countOccurences('\\\\.', hookName) === 1) {\n    const sections = hookName.split('.');\n    hookName = `${sections[0]}.default.${sections[1]}`;\n  }\n\n  if (typeof handler === 'function') {\n    handler = {\n      method: _handler\n    };\n  }\n\n  if (hookName in hooks) {\n    hooks[hookName].push(handler);\n  } else {\n    hooks[hookName] = [handler];\n  }\n}\n\nexport async function runRemoteHooks(serversConfig, command) {\n  return Promise.all(Object.values(serversConfig)\n    .map(server => runSSHCommand(server, command)\n      .then(({\n        output\n      }) => {\n        console.log(`=> output from ${server.host}`);\n        console.log(output);\n      })\n      .catch(e => {\n        console.error(`Error running remote hook command: ${command}`);\n        console.error(e);\n      })));\n}\n"]}