{"version":3,"sources":["../../../src/validate/__tests__/utils.unit.js"],"names":["describe","it","serversConfig","one","two","usedServers","three","result","expectedLength","length","details","path","reason","link","type","message","indexOf","expected","location"],"mappings":";;;;AAAA;;AACA;;;;;;AAEAA,SAAS,iBAAT,EAA4B,YAAM;AAChCA,WAAS,cAAT,EAAyB,YAAM;AAC7BC,OAAG,iCAAH,EAAsC,YAAM;AAC1C,UAAMC,gBAAgB,EAAEC,KAAK,EAAP,EAAWC,KAAK,EAAhB,EAAtB;AACA,UAAMC,cAAc,EAAEF,KAAK,EAAP,EAAWG,OAAO,EAAlB,EAApB;AACA,UAAMC,SAAS,yBAAaL,aAAb,EAA4BG,WAA5B,CAAf;AACA,UAAMG,iBAAiB,CAAvB;;AAEA,4BAAOD,OAAOE,MAAP,KAAkBD,cAAzB;AACD,KAPD;AAQD,GATD;AAUAR,WAAS,iBAAT,EAA4B,YAAM;AAChCC,OAAG,kCAAH,EAAuC,YAAM;AAC3C,UAAMS,UAAU,EAAhB;AACA,UAAMC,OAAO,cAAb;AACA,UAAMC,SAAS,uBAAf;AACA,UAAMC,OAAO,mBAAb;;AAJ2C,6BAM1B,4BAAgBH,OAAhB,EAAyBC,IAAzB,EAA+BC,MAA/B,EAAuCC,IAAvC,CAN0B;AAAA;AAAA,UAMpCN,MANoC;;AAQ3C,4BAAOA,OAAOO,IAAP,KAAgB,cAAvB;AACA,4BAAOP,OAAOI,IAAP,KAAgBA,IAAvB;AACA,4BAAOJ,OAAOQ,OAAP,CAAeC,OAAf,CAAuBJ,MAAvB,IAAiC,CAAC,CAAzC;AACA,4BAAOL,OAAOQ,OAAP,CAAeC,OAAf,CAAuBH,IAAvB,IAA+B,CAAC,CAAvC;AACD,KAZD;AAaD,GAdD;;AAgBAb,WAAS,aAAT,EAAwB,YAAM;AAC5BC,OAAG,gCAAH,EAAqC,YAAM;AACzC,UAAMgB,WAAW,qBAAjB;AACA,UAAMP,UAAU,CAAC;AACfC,cAAM,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADS;AAEfI,iBAAS;AAFM,OAAD,CAAhB;AAIA,UAAMG,WAAW,KAAjB;;AANyC,yBAQnB,wBAAYR,OAAZ,EAAqBQ,QAArB,CARmB;AAAA;AAAA,UAQhCH,OARgC,oBAQhCA,OARgC;;AAUzC,4BAAOA,YAAYE,QAAnB,EAA6BF,OAA7B;AACD,KAXD;AAYAd,OAAG,mCAAH,EAAwC,YAAM;AAC5C,UAAMgB,WAAW,qBAAjB;AACA,UAAMP,UAAU,CAAC;AACfC,cAAM,OADS;AAEfI,iBAAS;AAFM,OAAD,CAAhB;AAIA,UAAMG,WAAW,KAAjB;;AAN4C,0BAQtB,wBAAYR,OAAZ,EAAqBQ,QAArB,CARsB;AAAA;AAAA,UAQnCH,OARmC,oBAQnCA,OARmC;;AAU5C,4BAAOA,YAAYE,QAAnB,EAA6BF,OAA7B;AACD,KAXD;AAYD,GAzBD;AA0BD,CArDD","file":"utils.unit.js","sourcesContent":["import { addDepreciation, addLocation, serversExist } from '../utils';\nimport assert from 'assert';\n\ndescribe('validator utils', () => {\n  describe('serversExist', () => {\n    it('should find nonexistent servers', () => {\n      const serversConfig = { one: {}, two: {} };\n      const usedServers = { one: {}, three: {} };\n      const result = serversExist(serversConfig, usedServers);\n      const expectedLength = 1;\n\n      assert(result.length === expectedLength);\n    });\n  });\n  describe('addDepreciation', () => {\n    it('should add a depreciation detail', () => {\n      const details = [];\n      const path = 'servers.test';\n      const reason = 'Use \"testing\" instead';\n      const link = 'http://google.com';\n\n      const [result] = addDepreciation(details, path, reason, link);\n\n      assert(result.type === 'depreciation');\n      assert(result.path === path);\n      assert(result.message.indexOf(reason) > -1);\n      assert(result.message.indexOf(link) > -1);\n    });\n  });\n\n  describe('addLocation', () => {\n    it('should add location to message', () => {\n      const expected = '\"app.a.b.c\" message';\n      const details = [{\n        path: ['a', 'b', 'c'],\n        message: 'message'\n      }];\n      const location = 'app';\n\n      const [{ message }] = addLocation(details, location);\n\n      assert(message === expected, message);\n    });\n    it('should support paths from joi v10', () => {\n      const expected = '\"app.a.b.c\" message';\n      const details = [{\n        path: 'a.b.c',\n        message: 'message'\n      }];\n      const location = 'app';\n\n      const [{ message }] = addLocation(details, location);\n\n      assert(message === expected, message);\n    });\n  });\n});\n"]}