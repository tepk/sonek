{"version":3,"sources":["../src/server-info.js"],"names":["seperateCollectors","parseCollectorOutput","createHostResult","getServerInfo","serverInfo","log","parseJSONArray","stdout","code","output","split","join","result","JSON","parse","Array","e","builtInParsers","json","jsonArray","_collectors","swarm","command","parser","swarmNodes","swarmToken","indexOf","trim","swarmServices","images","prefix","suffix","codeSeperator","generateVarCommand","name","generateScript","collectors","script","Object","keys","forEach","collector","key","shift","map","collectorOutput","commandOutput","parseInt","collectorData","host","_host","data","server","then","hostResult","catch","console","err","servers","concurrency","serverResults","serverResult"],"mappings":"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","file":"server-info.js","sourcesContent":["import debug from 'debug';\nimport { map } from 'bluebird';\nimport { runSSHCommand } from './utils';\n\nconst log = debug('mup:server-info');\n\nfunction parseJSONArray(stdout, code) {\n  if (code === 0) {\n    try {\n      let output = stdout.split('\\n').join(',');\n      output = `[${output}]`;\n\n      const result = JSON.parse(output);\n\n      if (!(result instanceof Array)) {\n        return [result];\n      }\n\n      return result;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  return null;\n}\n\nexport const builtInParsers = {\n  json(stdout, code) {\n    if (code === 0) {\n      try {\n        return JSON.parse(stdout);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    return null;\n  },\n  jsonArray: parseJSONArray\n};\n\nexport const _collectors = {\n  swarm: {\n    command: 'docker info --format \\'{{json .Swarm}}\\'',\n    parser(stdout, code) {\n      if (code === 0) {\n        try {\n          return JSON.parse(stdout);\n        } catch (e) {\n          return null;\n        }\n      }\n\n      return null;\n    }\n  },\n  swarmNodes: {\n    command: 'docker node inspect $(docker node ls -q) --format \\'{{json .}}\\'',\n    parser: parseJSONArray\n  },\n  swarmToken: {\n    command: 'docker swarm join-token worker -q',\n    parser(stdout, code) {\n      if (code === 0 && stdout.indexOf('Error response') === -1) {\n        return stdout.trim();\n      }\n\n      return null;\n    }\n  },\n  swarmServices: {\n    command: 'docker service ls --format \\'{{json .}}\\'',\n    parser: parseJSONArray\n  },\n  images: {\n    command: 'docker images --format \\'{{json .}}\\'',\n    parser: parseJSONArray\n  }\n};\n\nconst prefix = '<============mup-var-start========';\nconst suffix = '================mup-var-stop=====>';\nconst codeSeperator = 'mup-var-code=======';\n\nfunction generateVarCommand(name, command) {\n  return `\n  echo \"${prefix}${name}${suffix}\"\n  ${command} 2>&1\n  echo \"${codeSeperator}\"\n  echo $?\n  `;\n}\n\nfunction generateScript(collectors) {\n  let script = '';\n  Object.keys(collectors).forEach(key => {\n    const collector = collectors[key];\n    script += generateVarCommand(key, collector.command);\n  });\n\n  return script;\n}\n\nexport function seperateCollectors(output) {\n  const collectors = output.split(prefix);\n  collectors.shift();\n\n  return collectors.map(collectorOutput => {\n    const name = collectorOutput.split(suffix)[0];\n    const commandOutput = collectorOutput\n      .split(suffix)[1]\n      .split(codeSeperator)[0];\n\n    return {\n      name: name.trim(),\n      output: commandOutput.trim(),\n      code: parseInt(collectorOutput.split(codeSeperator)[1].trim(), 10)\n    };\n  });\n}\n\nexport function parseCollectorOutput(name, output, code, collectors) {\n  if (typeof collectors[name].parser === 'string') {\n    return builtInParsers[collectors[name].parser](output, code);\n  }\n\n  return collectors[name].parser(output, code);\n}\n\nexport function createHostResult(collectorData, host, collectors) {\n  const result = { _host: host };\n  collectorData.forEach(data => {\n    result[data.name] = parseCollectorOutput(\n      data.name,\n      data.output,\n      data.code,\n      collectors\n    );\n  });\n\n  return result;\n}\n\nexport function getServerInfo(server, collectors) {\n  const command = generateScript(collectors);\n\n  return runSSHCommand(server, command)\n    .then(result => {\n      const collectorData = seperateCollectors(result.output);\n      const hostResult = createHostResult(\n        collectorData,\n        server.host,\n        collectors\n      );\n\n      return hostResult;\n    })\n    .catch(err => {\n      console.log(err, server);\n    });\n}\n\nexport default function serverInfo(servers, collectors = _collectors) {\n  log('starting');\n\n  return map(\n    servers,\n    server => getServerInfo(server, collectors),\n    { concurrency: 2 }\n  ).then(serverResults => {\n    const result = {};\n    serverResults.forEach(serverResult => {\n      result[serverResult._host] = serverResult;\n    });\n\n    log('finished');\n\n    return result;\n  });\n}\n"]}