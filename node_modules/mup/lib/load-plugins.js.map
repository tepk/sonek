{"version":3,"sources":["../src/load-plugins.js"],"names":["locatePluginDir","loadPlugins","log","modules","bundledPlugins","fs","readdirSync","__dirname","map","name","path","filter","isDirectoryMupPlugin","configPath","appPath","indexOf","configLocalPath","resolveFrom","silent","mupLocal","require","resolve","e","appLocalPath","globalModules","globalPath","plugins","module","plugin","console","chalk","red","code","failed","forEach","commands","Object","keys","key","hooks","validate","validators","entries","property","validator","prepareConfig","scrubConfig","swarmOptions","modulePath","moduleDir","statSync","isDirectory"],"mappings":"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","file":"load-plugins.js","sourcesContent":["import { join, resolve } from 'path';\nimport { moduleNotFoundIsPath, resolvePath } from './utils';\nimport { addPluginValidator } from './validate';\nimport chalk from 'chalk';\nimport debug from 'debug';\nimport fs from 'fs';\nimport globalModules from 'global-modules';\nimport registerCommand from './commands';\nimport { registerHook } from './hooks';\nimport { registerPreparer } from './prepare-config';\nimport { registerScrubber } from './scrub-config';\nimport { registerSwarmOptions } from './swarm-options';\nimport resolveFrom from 'resolve-from';\n\nconst log = debug('mup:plugin-loader');\n\nconst modules = {};\nexport default modules;\n\n// Load all folders in ./plugins as mup plugins.\n// The directory name is the module name.\nconst bundledPlugins = fs\n  .readdirSync(resolve(__dirname, 'plugins'))\n  .map(name => ({ name, path: `./plugins/${name}` }))\n  .filter(isDirectoryMupPlugin);\n\nloadPlugins(bundledPlugins);\n\nexport function locatePluginDir(name, configPath, appPath) {\n  log(`loading plugin ${name}`);\n\n  if (name.indexOf('.') === 0 || name.indexOf('/') === 0 || name.indexOf('~') === 0) {\n    log('plugin name is a path to the plugin');\n\n    return resolvePath(configPath, '../', name);\n  }\n\n  const configLocalPath = resolveFrom.silent(configPath, name);\n  if (configLocalPath) {\n    log('plugin installed locally to config folder');\n\n    return configLocalPath;\n  }\n  try {\n    const mupLocal = require.resolve(name);\n    log('plugin installed locally with mup');\n\n    return mupLocal;\n  } catch (e) {\n    // Continues to next location to resolve from\n  }\n\n  const appLocalPath = resolveFrom.silent(appPath, name);\n  if (appLocalPath) {\n    log('plugin installed locall in app folder');\n\n    return appLocalPath;\n  }\n\n  log(`global install path: ${globalModules}`);\n  const globalPath = resolveFrom.silent(resolve(globalModules, '..'), name);\n  if (globalPath) {\n    log('plugin installed globally');\n\n    return globalPath;\n  }\n  log('plugin not found');\n\n  return name;\n}\n\nexport function loadPlugins(plugins) {\n  plugins\n    .map(plugin => {\n      try {\n        // eslint-disable-next-line global-require\n        const module = require(plugin.path);\n        const name = module.name || plugin.name;\n\n        return { name, module };\n      } catch (e) {\n        console.log(chalk.red(`Unable to load plugin ${plugin.name}`));\n\n        // Hides error when plugin cannot be loaded\n        // Show the error when a plugin cannot resolve a module\n        if (\n          e.code !== 'MODULE_NOT_FOUND' ||\n          !moduleNotFoundIsPath(e, plugin.path)\n        ) {\n          console.log(e);\n        }\n\n        return { name: module.name || plugin.name, failed: true };\n      }\n    })\n    .filter(plugin => !plugin.failed)\n    .forEach(plugin => {\n      modules[plugin.name] = plugin.module;\n      if (plugin.module.commands) {\n        Object.keys(plugin.module.commands).forEach(key => {\n          registerCommand(plugin.name, key, plugin.module.commands[key]);\n        });\n      }\n      if (plugin.module.hooks) {\n        Object.keys(plugin.module.hooks).forEach(key => {\n          registerHook(key, plugin.module.hooks[key]);\n        });\n      }\n      if (typeof plugin.module.validate === 'object') {\n        const validators = Object.entries(plugin.module.validate);\n        for (const [property, validator] of validators) {\n          addPluginValidator(property, validator);\n        }\n      }\n      if (plugin.module.prepareConfig) {\n        registerPreparer(plugin.module.prepareConfig);\n      }\n      if (plugin.module.scrubConfig) {\n        registerScrubber(plugin.module.scrubConfig);\n      }\n      if (plugin.module.swarmOptions) {\n        registerSwarmOptions(plugin.module.swarmOptions);\n      }\n    });\n}\n\nfunction isDirectoryMupPlugin({ name, path: modulePath }) {\n  if (name === '__tests__') {\n    return false;\n  }\n\n  const moduleDir = join(__dirname, modulePath);\n\n  return fs.statSync(moduleDir).isDirectory();\n}\n"]}