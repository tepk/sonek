{"version":3,"sources":["../../../src/plugins/docker/swarm.js"],"names":["initSwarm","promoteNodes","removeManagers","joinNodes","diffLabels","updateLabels","managers","host","api","list","nodemiral","taskList","sessions","getSessionsForServers","executeScript","script","resolvePath","__dirname","vars","runTaskList","verbose","getVerbose","manager","nodeIds","scripts","servers","token","managerIP","currentLabels","desiredLabels","toRemove","toAdd","Object","keys","forEach","entries","server","label","value","push","session"],"mappings":"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","file":"swarm.js","sourcesContent":["import nodemiral from 'nodemiral';\n\nexport function initSwarm(managers, host, api) {\n  const list = nodemiral.taskList('Setting Up Docker Swarm');\n  const sessions = api.getSessionsForServers(managers);\n\n  list.executeScript('Creating Manager', {\n    script: api.resolvePath(__dirname, 'assets/init-swarm.sh'),\n    vars: {\n      host\n    }\n  });\n\n  return api.runTaskList(list, sessions, { verbose: api.getVerbose() });\n}\n\nexport function promoteNodes(manager, nodeIds, api) {\n  const list = nodemiral.taskList('Promoting Nodes to Managers');\n  const sessions = api.getSessionsForServers([manager]);\n\n  list.executeScript('Promoting Node', {\n    script: api.resolvePath(__dirname, 'assets/swarm-promote.sh'),\n    vars: {\n      nodeIds\n    }\n  });\n\n  return api.runTaskList(list, sessions, { verbose: api.getVerbose() });\n}\n\nexport function removeManagers(managers, api) {\n  const list = nodemiral.taskList('Removing Swarm Managers');\n  const sessions = api.getSessionsForServers(managers);\n\n  list.executeScript('Removing Managers', {\n    scripts: api.resolvePath(__dirname, 'assets/swarm-leave.sh')\n  });\n\n  return api.runTaskList(list, sessions, { verbose: api.getVerbose() });\n}\n\nexport function joinNodes(servers, token, managerIP, api) {\n  const list = nodemiral.taskList('Add Swarm Nodes');\n  const sessions = api.getSessionsForServers(servers);\n\n  list.executeScript('Joining node', {\n    script: api.resolvePath(__dirname, 'assets/swarm-join.sh'),\n    vars: {\n      token,\n      managerIP\n    }\n  });\n\n  return api.runTaskList(list, sessions, { verbose: api.getVerbose() });\n}\n\nexport function diffLabels(currentLabels, desiredLabels) {\n  const toRemove = [];\n  const toAdd = [];\n\n  // check for labels to add or update\n  Object.keys(desiredLabels).forEach(server => {\n    for (const [label, value] of Object.entries(desiredLabels[server])) {\n      if (!currentLabels[server] || currentLabels[server][label] !== value) {\n        toAdd.push({ server, label, value });\n      }\n    }\n  });\n\n  // check for labels no longer used\n  Object.keys(currentLabels).forEach(server => {\n    for (const [label] of Object.entries(currentLabels[server])) {\n      if (!desiredLabels[server] || !(label in desiredLabels[server])) {\n        toRemove.push({ server, label });\n      }\n    }\n  });\n\n  return { toRemove, toAdd };\n}\n\nexport function updateLabels(api, manager, toAdd, toRemove) {\n  const list = nodemiral.taskList('Update Swarm Labels');\n  const session = api.getSessionsForServers([manager]);\n\n  list.executeScript('Update Labels', {\n    script: api.resolvePath(__dirname, 'assets/swarm-labels.sh'),\n    vars: {\n      toAdd,\n      toRemove\n    }\n  });\n\n  return api.runTaskList(list, session, { verbose: api.getVerbose() });\n}\n"]}