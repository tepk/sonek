{"version":3,"sources":["../../../src/plugins/docker/command-handlers.js"],"names":["api","config","getConfig","swarmConfig","swarm","getServerInfo","serverInfo","swarmInfo","currentManagers","desiredManagers","log","managersToAdd","managersToRemove","managersToKeep","length","host","servers","push","shift","serverInfoStale","currentNodes","nodes","nodeIDs","currentLabels","desiredLabels","wantedNodes","Object","keys","nodesToAdd","token","reduce","result","item","swarmToken","managerIP","managerIDs","map","isEqual","name","toRemove","toAdd","data","server","setupSwarm","values","runSSHCommand","concurrency","results","lines","overallColor","chalk","green","forEach","dockerStatus","color","code","red","version","output","trim","versionColor","console","join","list","manager","node","status","setup","restart","removeSwarm","ps","uniqueSessions","sessions","getSessions","prev","curr","session","_host","indexOf","swarmEnabled","nodemiral","taskList","executeScript","script","resolvePath","__dirname","getSessionsForServers","runTaskList","verbose","then","args","getArgs","cb","execute","err","logs","magenta","blue","stdout"],"mappings":";;;;;;;;qEAoEO,iBAA0BA,GAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,kBADD,GACUD,IAAIE,SAAJ,EADV;AAECC,uBAFD,GAEeF,OAAOG,KAFtB;;AAAA,gBAGAD,WAHA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAOkBH,IAAIK,aAAJ,EAPlB;;AAAA;AAODC,sBAPC;AAAA;AAAA,mBAWKN,IAAIO,SAAJ,EAXL;;AAAA;AAAA;AASHC,2BATG,SASHA,eATG;AAUHC,2BAVG,SAUHA,eAVG;;;AAaLC,gBAAI,iBAAJ,EAAuBF,eAAvB;AACAE,gBAAI,gBAAJ,EAAsBD,eAAtB;;AAEME,yBAhBD,GAgBiB,wBAAWF,eAAX,EAA4BD,eAA5B,CAhBjB;AAiBCI,4BAjBD,GAiBoB,wBAAWJ,eAAX,EAA4BC,eAA5B,CAjBpB;AAkBCI,0BAlBD,GAkBkB,0BAAaL,eAAb,EAA8BC,eAA9B,CAlBlB;;;AAoBLC,gBAAI,iBAAJ,EAAuBC,aAAvB;AACAD,gBAAI,oBAAJ,EAA0BE,gBAA1B;AACAF,gBAAI,kBAAJ,EAAwBG,cAAxB;;AAtBK,kBAwBDL,gBAAgBM,MAAhB,KAA2B,CAxB1B;AAAA;AAAA;AAAA;;AAyBHJ,gBAAI,wBAAJ;AACMK,gBA1BH,GA0BUd,OAAOe,OAAP,CAAeL,cAAc,CAAd,CAAf,EAAiCI,IA1B3C;AAAA;AAAA,mBA4BG,sBAAUJ,aAAV,EAAyBI,IAAzB,EAA+Bf,GAA/B,CA5BH;;AAAA;;AA8BHa,2BAAeI,IAAf,CAAoBN,cAAcO,KAAd,EAApB;AACAR,gBAAI,2BAAJ;AACAV,gBAAImB,eAAJ;;AAhCG;AAAA;AAAA,mBAoCcnB,IAAIK,aAAJ,EApCd;;AAAA;AAoCLC,sBApCK;;;AAsCL;AACA;AACA,gBAAIM,iBAAiBE,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,yCAAeF,gBAAf,EAAiCZ,GAAjC;AACAA,kBAAImB,eAAJ;AACD;;AA3CI;AAAA,mBAkDKnB,IAAIO,SAAJ,EAlDL;;AAAA;AAAA;AA8CIa,wBA9CJ,SA8CHC,KA9CG;AA+CHC,mBA/CG,SA+CHA,OA/CG;AAgDHC,yBAhDG,SAgDHA,aAhDG;AAiDHC,yBAjDG,SAiDHA,aAjDG;AAmDCC,uBAnDD,GAmDeC,OAAOC,IAAP,CAAY1B,OAAOe,OAAnB,CAnDf;AAoDCY,sBApDD,GAoDc,wBAAWH,WAAX,EAAwBL,YAAxB,CApDd;;;AAsDLV,gBAAI,eAAJ,EAAqBU,YAArB;AACAV,gBAAI,cAAJ,EAAoBkB,UAApB;;AAvDK,kBAyDDA,WAAWd,MAAX,GAAoB,CAzDnB;AAAA;AAAA;AAAA;;AA0DH;AACMe,iBA3DH,GA2DWH,OAAOC,IAAP,CAAYrB,UAAZ,EACXwB,MADW,CACJ,UAACC,MAAD,EAASC,IAAT;AAAA,qBAAkBD,UAAUzB,WAAW0B,IAAX,EAAiBC,UAA7C;AAAA,aADI,EACqD,IADrD,CA3DX;AA6DGC,qBA7DH,GA6DejC,OAAOe,OAAP,CAAeP,gBAAgB,CAAhB,CAAf,EAAmCM,IA7DlD;AAAA;AAAA,mBA8DG,sBAAUa,UAAV,EAAsBC,KAAtB,EAA6BK,SAA7B,EAAwClC,GAAxC,CA9DH;;AAAA;;AAiELU,gBAAI,2BAAJ,EAAiCC,aAAjC;;AAjEK,kBAkEDA,cAAcG,MAAd,GAAuB,CAlEtB;AAAA;AAAA;AAAA;;AAmEGqB,sBAnEH,GAmEgBxB,cAChByB,GADgB,CACZ;AAAA,qBAAQ,qBAAQd,OAAR,EAAiB,qBAAQe,eAAR,EAAiBC,IAAjB,CAAjB,CAAR;AAAA,aADY,CAnEhB;AAAA;AAAA,mBAsEG,yBAAazB,eAAe,CAAf,CAAb,EAAgCsB,UAAhC,EAA4CnC,GAA5C,CAtEH;;AAAA;;AAyEL;AAzEK,0BA0EqB,uBAAWuB,aAAX,EAA0BC,aAA1B,CA1ErB,EA0ECe,QA1ED,eA0ECA,QA1ED,EA0EWC,KA1EX,eA0EWA,KA1EX;;AAAA,kBA2EDD,SAASzB,MAAT,GAAkB,CAAlB,IAAuB0B,MAAM1B,MAAN,GAAe,CA3ErC;AAAA;AAAA;AAAA;;AA4EHyB,uBAAWA,SAASH,GAAT,CAAa,gBAAQ;AAC9BK,mBAAKC,MAAL,GAAc,qBAAQpB,OAAR,EAAiB,qBAAQe,eAAR,EAAiBI,KAAKC,MAAtB,CAAjB,CAAd;;AAEA,qBAAOD,IAAP;AACD,aAJU,CAAX;;AAMAD,oBAAQA,MAAMJ,GAAN,CAAU,gBAAQ;AACxBK,mBAAKC,MAAL,GAAc,qBAAQpB,OAAR,EAAiB,qBAAQe,eAAR,EAAiBI,KAAKC,MAAtB,CAAjB,CAAd;;AAEA,qBAAOD,IAAP;AACD,aAJO,CAAR;;AAlFG;AAAA,mBAwFG,yBAAazC,GAAb,EAAkBQ,gBAAgB,CAAhB,CAAlB,EAAsCgC,KAAtC,EAA6CD,QAA7C,CAxFH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeI,U;;;;;;sEAoIf,kBAAsB3C,GAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,kBADD,GACUD,IAAIE,SAAJ,EADV;;AAAA,gBAGAD,OAAOe,OAHP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAOiB,mBACpBU,OAAOkB,MAAP,CAAc3C,OAAOe,OAArB,CADoB,EAEpB;AAAA,qBAAUhB,IAAI6C,aAAJ,CAAkBH,MAAlB,EAA0B,oDAA1B,CAAV;AAAA,aAFoB,EAGpB,EAAEI,aAAa,CAAf,EAHoB,CAPjB;;AAAA;AAOCC,mBAPD;AAaCC,iBAbD,GAaS,EAbT;AAcDC,wBAdC,GAccC,gBAAMC,KAdpB;;;AAgBLJ,oBAAQK,OAAR,CAAgB,kBAAU;AACxB,kBAAIC,eAAe,SAAnB;AACA,kBAAIC,QAAQ,OAAZ;;AAEA,kBAAIvB,OAAOwB,IAAP,KAAgB,CAApB,EAAuB;AACrBF,+BAAe,SAAf;AACAC,wBAAQ,KAAR;AACAL,+BAAeC,gBAAMM,GAArB;AACD,eAJD,MAIO,IAAIzB,OAAOwB,IAAP,KAAgB,GAApB,EAAyB;AAC9BF,+BAAe,eAAf;AACAC,wBAAQ,KAAR;AACAL,+BAAeC,gBAAMM,GAArB;AACD;;AAED,kBAAMC,UAAU1B,OAAO2B,MAAP,CAAcC,IAAd,GAAqB7C,MAArB,GAA8B,CAA9B,GAAkCiB,OAAO2B,MAAP,CAAcC,IAAd,EAAlC,GAAyD,EAAzE;AACA,kBAAIC,eAAeV,gBAAMC,KAAzB;;AAEA,kBAAI,CAAC,yBAAaM,OAAb,CAAL,EAA4B;AAC1BR,+BAAeC,gBAAMM,GAArB;AACAI,+BAAeV,gBAAMM,GAArB;AACD;;AAEDR,oBAAM/B,IAAN,SAAiBc,OAAOhB,IAAxB,UAAiC6C,aAAaH,OAAb,CAAjC,SAA0DP,gBAAMI,KAAN,EAAaD,YAAb,CAA1D;AACD,aAvBD;;AAyBAQ,oBAAQnD,GAAR,CAAYuC,aAAa,oBAAb,CAAZ;AACAY,oBAAQnD,GAAR,CAAYsC,MAAMc,IAAN,CAAW,IAAX,CAAZ;;AA1CK,gBA4CA7D,OAAOG,KA5CP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAgDoCJ,IAAIO,SAAJ,EAhDpC;;AAAA;AAAA;AAgDGC,2BAhDH,SAgDGA,eAhDH;AAgDoBa,iBAhDpB,SAgDoBA,KAhDpB;AAiDC0C,gBAjDD,GAiDQ,EAjDR;;;AAmDLvD,4BAAgB4C,OAAhB,CAAwB,mBAAW;AACjCW,mBAAK9C,IAAL,QAAe+C,OAAf;AACD,aAFD;;AAIA,oCAAW3C,KAAX,EAAkBb,eAAlB,EAAmC4C,OAAnC,CAA2C,gBAAQ;AACjDW,mBAAK9C,IAAL,QAAegD,IAAf;AACD,aAFD;;AAvDK,kBA2DDzD,gBAAgBM,MAAhB,KAA2B,CA3D1B;AAAA;AAAA;AAAA;;AA4DH+C,oBAAQnD,GAAR,CAAY,mBAAZ;;AA5DG;;AAAA;;AAiEL;AACA;;AAEAmD,oBAAQnD,GAAR,mBAA4BW,MAAMP,MAAlC;AACA+C,oBAAQnD,GAAR,CAAYqD,KAAKD,IAAL,CAAU,IAAV,CAAZ;;AArEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeI,M;;;;;QAhKNC,K,GAAAA,K;QAwHAC,O,GAAAA,O;QAcAC,W,GAAAA,W;QAcAC,E,GAAAA,E;;AA5LhB;;AAOA;;AAQA;;;;AACA;;AACA;;;;AACA;;AAGA;;AACA;;;;;;;;AAEA,IAAM5D,MAAM,qBAAM,mBAAN,CAAZ;;AAEA,SAAS6D,cAAT,CAAwBvE,GAAxB,EAA6B;AAC3B,MAAMwE,WAAWxE,IAAIyE,WAAJ,CAAgB,CAAC,KAAD,EAAQ,OAAR,EAAiB,OAAjB,CAAhB,CAAjB;;AAEA,SAAOD,SAAS1C,MAAT,CACL,UAAC4C,IAAD,EAAOC,IAAP,EAAgB;AACd,QAAID,KAAKtC,GAAL,CAAS;AAAA,aAAWwC,QAAQC,KAAnB;AAAA,KAAT,EAAmCC,OAAnC,CAA2CH,KAAKE,KAAhD,MAA2D,CAAC,CAAhE,EAAmE;AACjEH,WAAKzD,IAAL,CAAU0D,IAAV;AACD;;AAED,WAAOD,IAAP;AACD,GAPI,EAOF,EAPE,CAAP;AASD;;AAEM,SAASP,KAAT,CAAenE,GAAf,EAAoB;AACzBU,MAAI,0BAAJ;AACA,MAAMT,SAASD,IAAIE,SAAJ,EAAf;AACA,MAAM6E,eAAe9E,OAAOG,KAA5B;AACA,MAAMY,UAAUU,OAAOC,IAAP,CAAY1B,OAAOe,OAAP,IAAkB,EAA9B,CAAhB;;AAEA,MAAM+C,OAAOiB,oBAAUC,QAAV,CAAmB,cAAnB,CAAb;;AAEAlB,OAAKmB,aAAL,CAAmB,cAAnB,EAAmC;AACjCC,YAAQnF,IAAIoF,WAAJ,CAAgBC,SAAhB,EAA2B,wBAA3B;AADyB,GAAnC;;AAIA,MAAMb,WAAWO,eACf/E,IAAIsF,qBAAJ,CAA0BtE,OAA1B,CADe,GAEfuD,eAAevE,GAAf,CAFF;;AAIA,MAAIwE,SAAS1D,MAAT,KAAoB,CAAxB,EAA2B;AACzB;AACA;AACD;;AAED,SAAOd,IACJuF,WADI,CACQxB,IADR,EACcS,QADd,EACwB;AAC3BgB,aAASxF,IAAIwF;AADc,GADxB,EAIJC,IAJI,CAIC;AAAA,WAAM9C,WAAW3C,GAAX,CAAN;AAAA,GAJD,CAAP;AAKD;;AA8FM,SAASoE,OAAT,CAAiBpE,GAAjB,EAAsB;AAC3B,MAAM+D,OAAOiB,oBAAUC,QAAV,CAAmB,uBAAnB,CAAb;;AAEAlB,OAAKmB,aAAL,CAAmB,gBAAnB,EAAqC;AACnCC,YAAQnF,IAAIoF,WAAJ,CAAgBC,SAAhB,EAA2B,0BAA3B;AAD2B,GAArC;;AAIA,MAAMb,WAAWD,eAAevE,GAAf,CAAjB;;AAEA,SAAOA,IAAIuF,WAAJ,CAAgBxB,IAAhB,EAAsBS,QAAtB,EAAgC;AACrCgB,aAASxF,IAAIwF;AADwB,GAAhC,CAAP;AAGD;;AAEM,SAASnB,WAAT,CAAqBrE,GAArB,EAA0B;AAC/B,MAAM+D,OAAOiB,oBAAUC,QAAV,CAAmB,gBAAnB,CAAb;AACA,MAAMjE,UAAUU,OAAOC,IAAP,CAAY3B,IAAIE,SAAJ,GAAgBc,OAA5B,CAAhB;AACA,MAAMwD,WAAWxE,IAAIsF,qBAAJ,CAA0BtE,OAA1B,CAAjB;;AAEA+C,OAAKmB,aAAL,CAAmB,gBAAnB,EAAqC;AACnCC,YAAQnF,IAAIoF,WAAJ,CAAgBC,SAAhB,EAA2B,uBAA3B;AAD2B,GAArC;;AAIA,SAAOrF,IAAIuF,WAAJ,CAAgBxB,IAAhB,EAAsBS,QAAtB,EAAgC;AACrCgB,aAASxF,IAAIwF;AADwB,GAAhC,CAAP;AAGD;;AAEM,SAASlB,EAAT,CAAYtE,GAAZ,EAAiB;AACtB,MAAM0F,OAAO1F,IAAI2F,OAAJ,EAAb;AACAD,OAAKxE,KAAL;AACA,mBAAKqD,eAAevE,GAAf,CAAL,EAA0B,UAAC4E,OAAD,EAAUgB,EAAV,EAAiB;AACzChB,YAAQiB,OAAR,kBAA+BH,KAAK5B,IAAL,CAAU,GAAV,CAA/B,YAAsD,UAACgC,GAAD,EAAMvC,IAAN,EAAYwC,IAAZ,EAAqB;AACzElC,cAAQnD,GAAR,CAAYwC,gBAAM8C,OAAN,OAAkBpB,QAAQC,KAA1B,UAAsC3B,gBAAM+C,IAAN,cAAsBP,KAAK5B,IAAL,CAAU,GAAV,CAAtB,CAAlD;AACAD,cAAQnD,GAAR,CAAYqF,KAAKG,MAAjB;AACAN;AACD,KAJD;AAKD,GAND;AAOD","file":"command-handlers.js","sourcesContent":["import {\n  difference,\n  findKey,\n  intersection,\n  isEqual,\n  partial\n} from 'lodash';\nimport {\n  diffLabels,\n  initSwarm,\n  joinNodes,\n  promoteNodes,\n  removeManagers,\n  updateLabels\n} from './swarm';\nimport chalk from 'chalk';\nimport { checkVersion } from './utils';\nimport debug from 'debug';\nimport {\n  each\n} from 'async';\nimport { map } from 'bluebird';\nimport nodemiral from 'nodemiral';\n\nconst log = debug('mup:module:docker');\n\nfunction uniqueSessions(api) {\n  const sessions = api.getSessions(['app', 'mongo', 'proxy']);\n\n  return sessions.reduce(\n    (prev, curr) => {\n      if (prev.map(session => session._host).indexOf(curr._host) === -1) {\n        prev.push(curr);\n      }\n\n      return prev;\n    }, []\n  );\n}\n\nexport function setup(api) {\n  log('exec => mup docker setup');\n  const config = api.getConfig();\n  const swarmEnabled = config.swarm;\n  const servers = Object.keys(config.servers || {});\n\n  const list = nodemiral.taskList('Setup Docker');\n\n  list.executeScript('Setup Docker', {\n    script: api.resolvePath(__dirname, 'assets/docker-setup.sh')\n  });\n\n  const sessions = swarmEnabled ?\n    api.getSessionsForServers(servers) :\n    uniqueSessions(api);\n\n  if (sessions.length === 0) {\n    // There are no servers, so we can skip running the list\n    return;\n  }\n\n  return api\n    .runTaskList(list, sessions, {\n      verbose: api.verbose\n    })\n    .then(() => setupSwarm(api));\n}\n\nexport async function setupSwarm(api) {\n  const config = api.getConfig();\n  const swarmConfig = config.swarm;\n  if (!swarmConfig) {\n    return;\n  }\n\n  let serverInfo = await api.getServerInfo();\n  const {\n    currentManagers,\n    desiredManagers\n  } = await api.swarmInfo();\n\n  log('currentManagers', currentManagers);\n  log('wantedManagers', desiredManagers);\n\n  const managersToAdd = difference(desiredManagers, currentManagers);\n  const managersToRemove = difference(currentManagers, desiredManagers);\n  const managersToKeep = intersection(currentManagers, desiredManagers);\n\n  log('managers to add', managersToAdd);\n  log('managers to remove', managersToRemove);\n  log('managers keeping', managersToKeep);\n\n  if (currentManagers.length === 0) {\n    log('Creating swarm cluster');\n    const host = config.servers[managersToAdd[0]].host;\n\n    await initSwarm(managersToAdd, host, api);\n\n    managersToKeep.push(managersToAdd.shift());\n    log('finished creating cluster');\n    api.serverInfoStale();\n  }\n\n  // refresh server info after updating managers\n  serverInfo = await api.getServerInfo();\n\n  // TODO: we should always keep one manager until\n  // after the new managers are added\n  if (managersToRemove.length > 0) {\n    removeManagers(managersToRemove, api);\n    api.serverInfoStale();\n  }\n\n  const {\n    nodes: currentNodes,\n    nodeIDs,\n    currentLabels,\n    desiredLabels\n  } = await api.swarmInfo();\n  const wantedNodes = Object.keys(config.servers);\n  const nodesToAdd = difference(wantedNodes, currentNodes);\n\n  log('current nodes', currentNodes);\n  log('adding nodes', nodesToAdd);\n\n  if (nodesToAdd.length > 0) {\n    // TODO: make sure token is for correct cluster\n    const token = Object.keys(serverInfo)\n      .reduce((result, item) => result || serverInfo[item].swarmToken, null);\n    const managerIP = config.servers[desiredManagers[0]].host;\n    await joinNodes(nodesToAdd, token, managerIP, api);\n  }\n\n  log('remaining managers to add', managersToAdd);\n  if (managersToAdd.length > 0) {\n    const managerIDs = managersToAdd\n      .map(name => findKey(nodeIDs, partial(isEqual, name)));\n\n    await promoteNodes(managersToKeep[0], managerIDs, api);\n  }\n\n  // Update tags\n  let { toRemove, toAdd } = diffLabels(currentLabels, desiredLabels);\n  if (toRemove.length > 0 || toAdd.length > 0) {\n    toRemove = toRemove.map(data => {\n      data.server = findKey(nodeIDs, partial(isEqual, data.server));\n\n      return data;\n    });\n\n    toAdd = toAdd.map(data => {\n      data.server = findKey(nodeIDs, partial(isEqual, data.server));\n\n      return data;\n    });\n\n    await updateLabels(api, currentManagers[0], toAdd, toRemove);\n  }\n}\n\nexport function restart(api) {\n  const list = nodemiral.taskList('Restart Docker Daemon');\n\n  list.executeScript('Restart Docker', {\n    script: api.resolvePath(__dirname, 'assets/docker-restart.sh')\n  });\n\n  const sessions = uniqueSessions(api);\n\n  return api.runTaskList(list, sessions, {\n    verbose: api.verbose\n  });\n}\n\nexport function removeSwarm(api) {\n  const list = nodemiral.taskList('Removing swarm');\n  const servers = Object.keys(api.getConfig().servers);\n  const sessions = api.getSessionsForServers(servers);\n\n  list.executeScript('Removing swarm', {\n    script: api.resolvePath(__dirname, 'assets/swarm-leave.sh')\n  });\n\n  return api.runTaskList(list, sessions, {\n    verbose: api.verbose\n  });\n}\n\nexport function ps(api) {\n  const args = api.getArgs();\n  args.shift();\n  each(uniqueSessions(api), (session, cb) => {\n    session.execute(`sudo docker ${args.join(' ')} 2>&1`, (err, code, logs) => {\n      console.log(chalk.magenta(`[${session._host}]`) + chalk.blue(` docker ${args.join(' ')}`));\n      console.log(logs.stdout);\n      cb();\n    });\n  });\n}\n\nexport async function status(api) {\n  const config = api.getConfig();\n\n  if (!config.servers) {\n    return;\n  }\n\n  const results = await map(\n    Object.values(config.servers),\n    server => api.runSSHCommand(server, 'sudo docker version --format \"{{.Server.Version}}\"'),\n    { concurrency: 2 }\n  );\n\n  const lines = [];\n  let overallColor = chalk.green;\n\n  results.forEach(result => {\n    let dockerStatus = 'Running';\n    let color = 'green';\n\n    if (result.code === 1) {\n      dockerStatus = 'Stopped';\n      color = 'red';\n      overallColor = chalk.red;\n    } else if (result.code === 127) {\n      dockerStatus = 'Not installed';\n      color = 'red';\n      overallColor = chalk.red;\n    }\n\n    const version = result.output.trim().length > 1 ? result.output.trim() : '';\n    let versionColor = chalk.green;\n\n    if (!checkVersion(version)) {\n      overallColor = chalk.red;\n      versionColor = chalk.red;\n    }\n\n    lines.push(` - ${result.host}: ${versionColor(version)} ${chalk[color](dockerStatus)}`);\n  });\n\n  console.log(overallColor('\\n=> Docker Status'));\n  console.log(lines.join('\\n'));\n\n  if (!config.swarm) {\n    return;\n  }\n\n  const { currentManagers, nodes } = await api.swarmInfo();\n  const list = [];\n\n  currentManagers.forEach(manager => {\n    list.push(`- ${manager} (Manager)`);\n  });\n\n  difference(nodes, currentManagers).forEach(node => {\n    list.push(`- ${node}`);\n  });\n\n  if (currentManagers.length === 0) {\n    console.log('No swarm managers');\n\n    return;\n  }\n\n  // TODO show swarm health:\n  // https://docs.docker.com/engine/swarm/admin_guide/#monitor-swarm-health\n\n  console.log(`Swarm Nodes: ${nodes.length}`);\n  console.log(list.join('\\n'));\n}\n"]}