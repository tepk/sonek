{"version":3,"sources":["../../../src/plugins/default/command-handlers.js"],"names":["api","servers","Object","values","getConfig","lines","overallColor","command","runSSHCommand","server","concurrency","results","forEach","host","output","text","color","chalk","green","trim","split","version","distribution","aptGet","bash","versionCorrect","parseInt","distributionCorrect","hasAptGet","defaultBash","length","colors","statusColor","red","push","console","log","join","status","deploy","logs","reconfig","restart","setup","start","stop","ssh","validate","process","on","code","runCommand","serverOption","getArgs","keys","exitCode","sshOptions","_createSSHOptions","conn","Client","shell","err","stream","end","exit","stdin","setRawMode","pipe","stdout","stderr","setWindow","rows","columns","connect","getOptions","show","scrub","config","scrubConfig","JSON","stringify","errors","validateConfig","_overallColor","yellow"],"mappings":"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","file":"command-handlers.js","sourcesContent":["import chalk from 'chalk';\nimport { Client } from 'ssh2';\nimport debug from 'debug';\nimport { map } from 'bluebird';\n\nconst log = debug('mup:module:default');\n\nexport function deploy() {\n  log('exec => mup deploy');\n}\n\nexport function logs() {\n  log('exec => mup logs');\n}\n\nexport function reconfig() {\n  log('exec => mup reconfig');\n}\n\nexport function restart() {\n  log('exec => mup restart');\n}\n\nexport function setup(api) {\n  process.on('exit', code => {\n    if (code > 0) {\n      return;\n    }\n\n    console.log('');\n    console.log('Next, you should run:');\n    console.log('    mup deploy');\n  });\n\n  log('exec => mup setup');\n\n  return api.runCommand('docker.setup');\n}\n\nexport function start() {\n  log('exec => mup start');\n}\n\nexport function stop() {\n  log('exec => mup stop');\n}\n\nexport function ssh(api) {\n  const servers = api.getConfig().servers;\n  let serverOption = api.getArgs()[1];\n\n  if (!(serverOption in servers)) {\n    if (Object.keys(servers).length === 1) {\n      serverOption = Object.keys(servers)[0];\n    } else {\n      console.log('mup ssh <server>');\n      console.log('Available servers are:\\n', Object.keys(servers).join('\\n '));\n      process.exitCode = 1;\n\n      return;\n    }\n  }\n\n  const server = servers[serverOption];\n  const sshOptions = api._createSSHOptions(server);\n\n  const conn = new Client();\n  conn.on('ready', () => {\n    conn.shell((err, stream) => {\n      if (err) {\n        throw err;\n      }\n      stream.on('close', () => {\n        conn.end();\n        process.exit();\n      });\n\n      process.stdin.setRawMode(true);\n      process.stdin.pipe(stream);\n\n      stream.pipe(process.stdout);\n      stream.stderr.pipe(process.stderr);\n      stream.setWindow(process.stdout.rows, process.stdout.columns);\n\n      process.stdout.on('resize', () => {\n        stream.setWindow(process.stdout.rows, process.stdout.columns);\n      });\n    });\n  }).connect(sshOptions);\n}\n\nexport function validate(api) {\n  // Shows validation errors\n  api.getConfig();\n\n  if (api.getOptions().show || api.getOptions().scrub) {\n    let config = api.getConfig();\n\n    if (api.getOptions().scrub) {\n      config = api.scrubConfig();\n    }\n    console.log(JSON.stringify(config, null, 2));\n  }\n\n  const errors = api.validateConfig('');\n  if (errors.length > 0) {\n    process.exitCode = 1;\n  } else {\n    console.log(chalk.green('\\u2713 Config is valid'));\n  }\n}\n\nfunction statusColor(\n  versionCorrect,\n  distributionCorrect,\n  hasAptGet,\n  defaultBash,\n  _overallColor\n) {\n  let color = chalk.green;\n  let overallColor = _overallColor;\n\n  if (!hasAptGet) {\n    color = chalk.red;\n    overallColor = 'red';\n  } else if (!distributionCorrect) {\n    color = chalk.yellow;\n    if (overallColor !== 'red') {\n      overallColor = 'yellow';\n    }\n  } else if (!versionCorrect) {\n    color = chalk.red;\n    overallColor = 'red';\n  } else if (!defaultBash) {\n    color = chalk.red;\n    overallColor = 'red';\n  }\n\n  return {\n    color,\n    overallColor\n  };\n}\n\nexport async function status(api) {\n  const servers = Object.values(api.getConfig().servers);\n  const lines = [];\n  let overallColor = 'green';\n  const command = 'lsb_release -r -s || echo \"false\"; lsb_release -is; apt-get -v &> /dev/null && echo \"true\" || echo \"false\"; echo $BASH';\n  const results = await map(\n    servers,\n    server => api.runSSHCommand(server, command),\n    { concurrency: 2 }\n  );\n\n  results.forEach(({ host, output }) => {\n    let text = `  - ${host}: `;\n    let color = chalk.green;\n    const [\n      version,\n      distribution,\n      aptGet,\n      bash = ''\n    ] = output.trim().split('\\n');\n\n    const versionCorrect = parseInt(version, 10) > 13;\n    const distributionCorrect = distribution === 'Ubuntu';\n    const hasAptGet = aptGet.trim() === 'true';\n    const defaultBash = bash.trim().length > 0;\n\n    const colors = statusColor(\n      versionCorrect,\n      distributionCorrect,\n      hasAptGet,\n      defaultBash,\n      overallColor\n    );\n\n    color = colors.color;\n    overallColor = colors.overallColor;\n\n    text += color(`${distribution} ${version}`);\n    if (!hasAptGet) {\n      text += chalk.red(' apt-get not available');\n    }\n\n    if (!defaultBash) {\n      text += chalk.red(' Bash is not the default shell');\n    }\n\n    lines.push(text);\n  });\n\n  console.log(chalk[overallColor]('=> Servers'));\n  console.log(lines.join('\\n'));\n}\n"]}