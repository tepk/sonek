{"version":3,"sources":["../../../../src/plugins/default/__tests__/index.js"],"names":["chai","use","chaiString","sh","config","silent","servers","require","timeout","serverInfo","mymeteor","cd","path","resolve","os","tmpdir","exec","out","code","to","equal","output","satisfy","text","indexOf","be","ssh1","ssh2","dir","mkdir","fs","existsSync","true","rm","expect","have","entriesCount","gte"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport chai, { expect } from 'chai';\nimport { countOccurences, runSSHCommand } from '../../../utils';\nimport { describe, it } from 'mocha';\nimport chaiString from 'chai-string';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport sh from 'shelljs';\n\nchai.use(chaiString);\n\nsh.config.silent = false;\nconst servers = require('../../../../tests/fixtures/servers');\n\ndescribe('module - default', function() {\n  this.timeout(900000);\n\n  describe('deploy', () => {\n    it('should deploy meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup');\n\n      const out = sh.exec('mup deploy --cached-build');\n\n      expect(out.code).to.equal(0);\n      expect(\n        out.output\n      ).satisfy(text => {\n        if (text.indexOf('Building App Bundle Locally') > -1) {\n          return true;\n        }\n\n        return text.indexOf('Using build from previous deploy at') > -1;\n      });\n\n      expect(\n        countOccurences(\n          'Pushing Meteor App Bundle to the Server: SUCCESS',\n          out.output\n        )\n      ).to.be.equal(1);\n      expect(\n        countOccurences('Pushing the Startup Script: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(\n        countOccurences('Sending Environment Variables: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(countOccurences('Start Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Verifying Deployment: SUCCESS', out.output)\n      ).to.be.equal(1);\n      const ssh1 = await runSSHCommand(\n        serverInfo,\n        'nc -z -v -w5 localhost 27017'\n      );\n      expect(ssh1.code).to.be.equal(0);\n      const ssh2 = await runSSHCommand(\n        serverInfo,\n        'curl localhost:80 && exit 0'\n      );\n      expect(ssh2.code).to.be.equal(0);\n    });\n  });\n\n  describe('init', () => {\n    it('should create \"mup.js\" and \"setting.json\" in /tmp/project-tmp', () => {\n      const dir = path.resolve(os.tmpdir(), 'project-tmp');\n      sh.mkdir(dir);\n      sh.cd(dir);\n      sh.exec('mup init');\n      expect(fs.existsSync(path.resolve(dir, 'mup.js'))).to.true;\n      expect(fs.existsSync(path.resolve(dir, 'settings.json'))).to.true;\n      sh.rm('-rf', dir);\n    });\n  });\n\n  describe('logs', () => {\n    it('should pull the logs from meteor app', () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      const out = sh.exec('mup logs --tail 2');\n      expect(out.code).to.be.equal(0);\n    });\n  });\n\n  describe('reconfig', () => {\n    it('should reconfig meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup deploy --cached-build');\n\n      const out = sh.exec('mup reconfig');\n\n      expect(out.code).to.be.equal(0);\n      expect(\n        countOccurences('Sending Environment Variables: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(countOccurences('Start Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Verifying Deployment: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(0);\n    });\n  });\n\n  describe('restart', () => {\n    it('should restart meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup deploy --cached-build');\n\n      const out = sh.exec('mup restart');\n\n      expect(out.code).to.be.equal(0);\n      expect(out.output).to.have.entriesCount('Stop Meteor: SUCCESS', 1);\n      expect(out.output).to.have.entriesCount('Start Meteor: SUCCESS', 1);\n      expect(\n        out.output\n      ).to.have.entriesCount('Verifying Deployment: SUCCESS', 1);\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(0, 'Curl exit code');\n    });\n  });\n\n  describe('setup', () => {\n    it('should setup \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      const out = sh.exec('mup setup');\n\n      expect(out.code).to.be.equal(0);\n      expect(countOccurences('Setup Docker: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Setup Environment: SUCCESS', out.output)\n      ).to.be.equal(2);\n      expect(countOccurences('Start Mongo: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        (await runSSHCommand(serverInfo, 'nc -z -v -w5 localhost 27017')).code\n      ).to.be.equal(0);\n    });\n  });\n\n  describe('start', () => {\n    it('should start meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup meteor push --cached-build && mup meteor envconfig');\n\n      const out = sh.exec('mup start');\n\n      expect(out.code).to.be.equal(0);\n      expect(countOccurences('Start Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        countOccurences('Verifying Deployment: SUCCESS', out.output)\n      ).to.be.equal(1);\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(0);\n    });\n  });\n\n  describe('stop', () => {\n    it('should stop meteor app on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n      sh.exec('mup setup  && mup deploy --cached-build');\n\n      const out = sh.exec('mup stop');\n\n      expect(out.code).to.be.equal(0);\n      expect(countOccurences('Stop Meteor: SUCCESS', out.output)).to.be.equal(\n        1\n      );\n      expect(\n        (await runSSHCommand(serverInfo, 'curl localhost:80 && exit 0')).code\n      ).to.be.equal(7);\n    });\n  });\n\n  describe('syslog', () => {\n    const serverInfo = servers.mymeteor;\n\n    it('should write meteor logs to syslog on \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-2'));\n\n      sh.exec('mup setup && mup deploy --cached-build');\n      const out = await runSSHCommand(\n        serverInfo,\n        'sudo tail -n 100 /var/log/syslog'\n      );\n      expect(out.code).to.be.equal(0);\n\n      expect(\n        countOccurences('=> Starting meteor app on port:80', out.output)\n      ).gte(1);\n    });\n  });\n});\n"]}