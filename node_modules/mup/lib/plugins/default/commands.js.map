{"version":3,"sources":["../../../src/plugins/default/commands.js"],"names":["commandHandlers","init","description","handler","initHandler","deploy","builder","yargs","option","boolean","logs","strict","number","alias","reconfig","restart","setup","start","stop","ssh","name","validate","bool","status"],"mappings":";;;;;;;AAAA;;IAAYA,e;;AACZ;;;;;;;;AAEO,IAAMC,sBAAO;AAClBC,eAAa,iCADK;AAElBC,WAASC;AAFS,CAAb;;AAKA,IAAMC,0BAAS;AACpBH,eAAa,sBADO;AAEpBI,SAFoB,mBAEZC,KAFY,EAEL;AACb,WAAOA,MAAMC,MAAN,CAAa,cAAb,EAA6B;AAClCN,mBAAa,gCADqB;AAElCO,eAAS;AAFyB,KAA7B,CAAP;AAID,GAPmB;;AAQpBN,WAASH,gBAAgBK;AARL,CAAf;;AAWA,IAAMK,sBAAO;AAClBR,eAAa,qDADK;AAElBI,SAFkB,mBAEVC,KAFU,EAEH;AACb,WAAOA,MACJI,MADI,CACG,KADH,EAEJH,MAFI,CAEG,MAFH,EAEW;AACdN,mBAAa,kDADC;AAEdU,cAAQ;AAFM,KAFX,EAMJJ,MANI,CAMG,QANH,EAMa;AAChBN,mBAAa,mBADG;AAEhBW,aAAO,GAFS;AAGhBJ,eAAS;AAHO,KANb,CAAP;AAWD,GAdiB;;AAelBN,WAASH,gBAAgBU;AAfP,CAAb;;AAkBA,IAAMI,8BAAW;AACtBZ,eAAa,qDADS;AAEtBC,WAASH,gBAAgBc;AAFH,CAAjB;;AAKA,IAAMC,4BAAU;AACrBb,eAAa,aADQ;AAErBC,WAASH,gBAAgBe;AAFJ,CAAhB;;AAKA,IAAMC,wBAAQ;AACnBd,eAAa,kEADM;AAEnBC,WAASH,gBAAgBgB;AAFN,CAAd;;AAKA,IAAMC,wBAAQ;AACnBf,eAAa,WADM;AAEnBC,WAASH,gBAAgBiB;AAFN,CAAd;;AAKA,IAAMC,sBAAO;AAClBhB,eAAa,UADK;AAElBC,WAASH,gBAAgBkB;AAFP,CAAb;;AAKA,IAAMC,oBAAM;AACjBC,QAAM,cADW;AAEjBlB,eAAa,iBAFI;AAGjBC,WAASH,gBAAgBmB;AAHR,CAAZ;;AAMA,IAAME,8BAAW;AACtBnB,eAAa,iBADS;AAEtBI,SAFsB,mBAEdC,KAFc,EAEP;AACb,WAAOA,MAAMC,MAAN,CAAa,MAAb,EAAqB;AAC1BN,mBAAa,6CADa;AAE1BoB,YAAM;AAFoB,KAArB,EAGJd,MAHI,CAGG,OAHH,EAGY;AACjBN,mBAAa,qDADI;AAEjBoB,YAAM;AAFW,KAHZ,CAAP;AAOD,GAVqB;;AAWtBnB,WAASH,gBAAgBqB;AAXH,CAAjB;;AAcA,IAAME,0BAAS;AACpBrB,eAAa,yDADO;AAEpBC,WAASH,gBAAgBuB;AAFL,CAAf","file":"commands.js","sourcesContent":["import * as commandHandlers from './command-handlers';\nimport initHandler from './init';\n\nexport const init = {\n  description: 'Setup files for new mup project',\n  handler: initHandler\n};\n\nexport const deploy = {\n  description: 'Deploy app to server',\n  builder(yargs) {\n    return yargs.option('cached-build', {\n      description: 'Use build from previous deploy',\n      boolean: true\n    });\n  },\n  handler: commandHandlers.deploy\n};\n\nexport const logs = {\n  description: 'Show app\\'s logs. Supports options from docker logs',\n  builder(yargs) {\n    return yargs\n      .strict(false)\n      .option('tail', {\n        description: 'Number of lines to show from the end of the logs',\n        number: true\n      })\n      .option('follow', {\n        description: 'Follow log output',\n        alias: 'f',\n        boolean: true\n      });\n  },\n  handler: commandHandlers.logs\n};\n\nexport const reconfig = {\n  description: 'Updates server env and start script to match config',\n  handler: commandHandlers.reconfig\n};\n\nexport const restart = {\n  description: 'Restart app',\n  handler: commandHandlers.restart\n};\n\nexport const setup = {\n  description: 'Install dependencies, custom certificates, and MongoDB on server',\n  handler: commandHandlers.setup\n};\n\nexport const start = {\n  description: 'Start app',\n  handler: commandHandlers.start\n};\n\nexport const stop = {\n  description: 'Stop app',\n  handler: commandHandlers.stop\n};\n\nexport const ssh = {\n  name: 'ssh [server]',\n  description: 'SSH into server',\n  handler: commandHandlers.ssh\n};\n\nexport const validate = {\n  description: 'validate config',\n  builder(yargs) {\n    return yargs.option('show', {\n      description: 'Show config after being modified by plugins',\n      bool: true\n    }).option('scrub', {\n      description: 'Shows the config with sensitive information removed',\n      bool: true\n    });\n  },\n  handler: commandHandlers.validate\n};\n\nexport const status = {\n  description: 'View status of your app, databases and other components',\n  handler: commandHandlers.status\n};\n"]}