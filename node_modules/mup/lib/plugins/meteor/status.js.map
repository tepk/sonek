{"version":3,"sources":["../../../src/plugins/meteor/status.js"],"names":["server","appConfig","api","runSSHCommand","env","PORT","remote","name","docker","imagePort","inDocker","local","axios","get","host","code","checkUrls","getInformation","appName","then","output","info","JSON","parse","trim","e","statusColor","status","State","Restarting","Running","publishedPorts","exposedPorts","Object","keys","NetworkSettings","Ports","forEach","key","push","HostPort","Config","Env","envVariable","split","restartCount","RestartCount","restartColor","created","Created","Status","values"],"mappings":"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","file":"status.js","sourcesContent":["import axios from 'axios';\n\nexport function getInformation(server, appName, api) {\n  return api.runSSHCommand(server, `docker inspect ${appName} --format \"{{json .}}\"`)\n    .then(({ host, output }) => {\n      let info;\n\n      try {\n        info = JSON.parse(output.trim());\n      } catch (e) {\n        return {\n          statusColor: 'red',\n          status: 'Stopped',\n          host: server.host\n        };\n      }\n\n      let statusColor = 'green';\n      if (info.State.Restarting) {\n        statusColor = 'yellow';\n      } else if (!info.State.Running) {\n        statusColor = 'red';\n      }\n\n      const publishedPorts = [];\n      const exposedPorts = [];\n      Object.keys(info.NetworkSettings.Ports || {}).forEach(key => {\n        if (info.NetworkSettings.Ports[key]) {\n          publishedPorts.push(`${key} => ${info.NetworkSettings.Ports[key][0].HostPort}`);\n        } else {\n          exposedPorts.push(key);\n        }\n      });\n\n      const env = {};\n      info.Config.Env.forEach(envVariable => {\n        const name = envVariable.split('=')[0];\n        env[name] = envVariable;\n      });\n\n      const restartCount = info.RestartCount;\n      let restartColor = 'green';\n      if (restartCount > 0) {\n        restartColor = 'yellow';\n      } else if (restartCount > 2) {\n        restartColor = 'red';\n      }\n\n      return {\n        host,\n        created: info.Created,\n        status: info.State.Status,\n        statusColor,\n        env: Object.values(env),\n        restartCount,\n        restartColor,\n        publishedPorts,\n        exposedPorts\n      };\n    });\n}\n\nexport async function checkUrls(server, appConfig, api) {\n  const remote = await api.runSSHCommand(server, `curl 127.0.0.1:${appConfig.env.PORT}`);\n  const inDocker = await api.runSSHCommand(server, `docker exec ${appConfig.name} curl http://localhost:${appConfig.docker.imagePort}`);\n  let local;\n\n  try {\n    local = await axios.get(`http://${server.host}:${appConfig.env.PORT}`);\n  } catch (e) {\n    local = false;\n  }\n\n  return {\n    inDocker: inDocker.code === 0,\n    remote: remote.code === 0,\n    local: local !== false\n  };\n}\n"]}