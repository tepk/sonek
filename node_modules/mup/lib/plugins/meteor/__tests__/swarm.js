'use strict';

var checkRunning = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var serverInfo, sshService, sshOut;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            serverInfo = servers.mymeteor;
            _context.next = 3;
            return (0, _utils.runSSHCommand)(serverInfo, 'docker service inspect myapp-service');

          case 3:
            sshService = _context.sent;


            (0, _chai.expect)(sshService.code).to.equal(0);

            _context.next = 7;
            return (0, _utils.runSSHCommand)(serverInfo, 'curl localhost:80');

          case 7:
            sshOut = _context.sent;


            (0, _chai.expect)(sshOut.code).to.equal(0);

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function checkRunning() {
    return _ref.apply(this, arguments);
  };
}();

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _mocha = require('mocha');

var _chaiString = require('chai-string');

var _chaiString2 = _interopRequireDefault(_chaiString);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('../../../utils');

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

_chai2.default.use(_chaiString2.default);
_shelljs2.default.config.silent = false;
var servers = require('../../../../tests/fixtures/servers');

function cdSwarmProject() {
  _shelljs2.default.cd(_path2.default.resolve(_os2.default.tmpdir(), 'tests/project-swarm'));
}

(0, _mocha.describe)('module - meteor swarm', function () {
  var _this = this;

  this.timeout(600000);

  this.afterAll(function () {
    cdSwarmProject();
    _shelljs2.default.exec('mup docker destroy-cluster');
  });

  (0, _mocha.describe)('envconfig', function () {
    (0, _mocha.it)('should not run when swarm is enabled', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var out;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              cdSwarmProject();
              _shelljs2.default.exec('mup setup && mup meteor push --cached-build');
              out = _shelljs2.default.exec('mup meteor envconfig');


              (0, _chai.expect)(out.code).to.equal(0);
              (0, _chai.expect)(out.output).to.have.entriesCount('Sending Environment Variables', 0);

            case 5:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this);
    })));
  });

  (0, _mocha.describe)('start', function () {
    (0, _mocha.it)('should create service', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var out;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              cdSwarmProject();
              _shelljs2.default.exec('mup setup && mup meteor push --cached-build');

              out = _shelljs2.default.exec('mup meteor start');


              (0, _chai.expect)(out.code).to.equal(0);
              _context3.next = 6;
              return checkRunning();

            case 6:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, _this);
    })));
  });
  (0, _mocha.describe)('stop', function () {
    (0, _mocha.it)('should remove service', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var serverInfo, out, sshService;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              serverInfo = servers.mymeteor;


              cdSwarmProject();
              _shelljs2.default.exec('mup setup && mup meteor deploy --cached-build');

              out = _shelljs2.default.exec('mup meteor stop');


              (0, _chai.expect)(out.output).to.have.entriesCount('Stop myapp-service: SUCCESS', 1);

              _context4.next = 7;
              return (0, _utils.runSSHCommand)(serverInfo, 'docker service inspect myapp-service');

            case 7:
              sshService = _context4.sent;


              (0, _chai.expect)(sshService.code).to.equal(1);

            case 9:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, _this);
    })));
  });
  (0, _mocha.describe)('restart', function () {
    (0, _mocha.it)('should restart the service', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      var out;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              cdSwarmProject();
              _shelljs2.default.exec('mup setup && mup meteor deploy --cached-build');

              out = _shelljs2.default.exec('mup meteor restart');


              (0, _chai.expect)(out.output).to.have.entriesCount('Restart myapp-service: SUCCESS', 1);
              _context5.next = 6;
              return checkRunning();

            case 6:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, _this);
    })));
  });
  (0, _mocha.describe)('logs', function () {
    (0, _mocha.it)('should show service logs', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      var out;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              cdSwarmProject();
              _shelljs2.default.exec('mup setup && mup meteor deploy --cached-build');
              out = _shelljs2.default.exec('mup meteor logs --tail 2');


              (0, _chai.expect)(out.output.indexOf('=> Staring meteor app on port 3000')).to.be.greaterThan(-1);

            case 4:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, _this);
    })));
  });
});
//# sourceMappingURL=swarm.js.map