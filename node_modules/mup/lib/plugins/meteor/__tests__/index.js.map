{"version":3,"sources":["../../../../src/plugins/meteor/__tests__/index.js"],"names":["chai","use","chaiString","sh","config","silent","servers","require","timeout","serverInfo","mymeteor","cd","path","resolve","os","tmpdir","out","exec","assert","equal","code","num","output","sshOut","to","have","entriesCount","sshOut2","appText","num2","num3","checkDeploy"],"mappings":"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","file":"index.js","sourcesContent":["import chai, { expect } from 'chai';\nimport { countOccurences, runSSHCommand } from '../../../utils';\nimport { describe, it } from 'mocha';\nimport assert from 'assert';\nimport chaiString from 'chai-string';\nimport os from 'os';\nimport path from 'path';\nimport sh from 'shelljs';\n\nchai.use(chaiString);\n\nsh.config.silent = false;\nconst servers = require('../../../../tests/fixtures/servers');\n\ndescribe('module - meteor', function() {\n  this.timeout(600000);\n\n  describe('setup', () => {\n    it('should setup environment on \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n\n      await runSSHCommand(serverInfo, 'rm -rf /opt/myapp || :');\n      await runSSHCommand(\n        serverInfo,\n        'command -v tree >/dev/null 2>&1 || { sudo apt-get -qq update && sudo apt-get -qq install -y tree; }'\n      );\n\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      const out = sh.exec('mup meteor setup');\n      assert.equal(out.code, 0);\n\n      const num = countOccurences('Setup Environment: SUCCESS', out.output);\n      assert.equal(num, 1);\n\n      const sshOut = await runSSHCommand(serverInfo, 'tree -pufid /opt');\n      expect(sshOut.output).to.have.entriesCount('/opt/myapp', 3);\n      expect(sshOut.output).to.have.entriesCount('/opt/myapp/config', 1);\n      expect(sshOut.output).to.have.entriesCount('/opt/myapp/tmp', 1);\n    });\n  });\n\n  describe('push', () => {\n    it('should push meteor app bundle to \"meteor\" vm', async () => {\n      const serverInfo = servers.mymeteor;\n\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup docker setup');\n      sh.exec('mup meteor setup');\n\n      const out = sh.exec('mup meteor push --cached-build');\n      assert.equal(out.code, 0);\n\n      const num = countOccurences(\n        'Pushing Meteor App Bundle to the Server: SUCCESS',\n        out.output\n      );\n      assert.equal(num, 1);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'ls -al /opt/myapp/tmp/bundle.tar.gz'\n      );\n      assert.equal(sshOut.code, 0);\n    });\n  });\n\n  describe('envconfig', () => {\n    const serverInfo = servers.mymeteor;\n    it('should send the environment variables to \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup meteor setup');\n\n      const out = sh.exec('mup meteor envconfig');\n      assert.equal(out.code, 0);\n\n      const num = countOccurences(\n        'Sending Environment Variables: SUCCESS',\n        out.output\n      );\n      assert.equal(num, 1);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'ls -al /opt/myapp/config/env.list'\n      );\n      assert.equal(sshOut.code, 0);\n\n      const sshOut2 = await runSSHCommand(\n        serverInfo,\n        'ls -al /opt/myapp/config/start.sh'\n      );\n\n      assert.equal(sshOut2.code, 0);\n    });\n    it('should push server specific env variables', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-2'));\n      sh.exec('mup meteor setup');\n\n      const out = sh.exec('mup meteor envconfig');\n\n      expect(out.code).to.equal(0);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'cat /opt/myapp/config/env.list'\n      );\n\n      expect(sshOut.output).to.have.entriesCount('TEST=true', 1);\n    });\n  });\n\n  describe('start', () => {\n    const serverInfo = servers.mymeteor;\n\n    it('should start meteor on \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec(\n        'mup setup && mup meteor push --cached-build && mup meteor envconfig'\n      );\n      const out = sh.exec('mup meteor start');\n      assert.equal(out.code, 0);\n\n      const num = countOccurences('Start Meteor: SUCCESS', out.output);\n      assert.equal(num, 1);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'curl localhost:80 && exit 0'\n      );\n      assert.equal(sshOut.code, 0);\n    });\n  });\n\n  describe('deploy', () => {\n    const serverInfo = servers.mymeteor;\n\n    async function checkDeploy(out, appText) {\n      assert.equal(out.code, 0);\n\n      const num = countOccurences(\n        'Sending Environment Variables: SUCCESS',\n        out.output\n      );\n      assert.equal(num, 1);\n\n      const num2 = countOccurences('Start Meteor: SUCCESS', out.output);\n      assert.equal(num2, 1);\n\n      const num3 = countOccurences(\n        'Pushing Meteor App Bundle to the Server: SUCCESS',\n        out.output\n      );\n      assert.equal(num3, 1);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'curl localhost:80 && exit 0'\n      );\n      assert.equal(sshOut.code, 0);\n      expect(sshOut.output).to.have.entriesCount(appText, 1);\n    }\n\n    it('should deploy meteor app on \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup setup');\n      const out = sh.exec('mup meteor deploy --cached-build');\n\n      checkDeploy(out, '<title>helloapp-new</title>');\n    });\n\n    it('should deploy app using Meteor 1.2', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup setup --config mup.old.js');\n      const out = sh.exec('mup meteor deploy --cached-build --config mup.old.js');\n      expect(out.code).to.equal(0);\n      checkDeploy(out, '<title>helloapp</title>');\n    });\n  });\n\n  describe('logs', () => {\n    it('should pull the logs from \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      const out = sh.exec('mup meteor logs --tail 2');\n      assert.equal(out.code, 0);\n    });\n  });\n\n  describe('stop', () => {\n    const serverInfo = servers.mymeteor;\n    it('should stop meteor app on \"meteor\" vm', async () => {\n      sh.cd(path.resolve(os.tmpdir(), 'tests/project-1'));\n\n      sh.exec('mup setup && mup deploy --cached-build');\n      const out = sh.exec('mup meteor stop');\n      assert.equal(out.code, 0);\n\n      const num = countOccurences('Stop Meteor: SUCCESS', out.output);\n      assert.equal(num, 1);\n\n      const sshOut = await runSSHCommand(\n        serverInfo,\n        'curl localhost:80 && exit 0'\n      );\n      assert.equal(sshOut.code, 7);\n    });\n  });\n});\n"]}