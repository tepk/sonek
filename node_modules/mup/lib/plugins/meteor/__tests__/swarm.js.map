{"version":3,"sources":["../../../../src/plugins/meteor/__tests__/swarm.js"],"names":["serverInfo","servers","mymeteor","sshService","code","to","equal","sshOut","checkRunning","chai","use","chaiString","sh","config","silent","require","cdSwarmProject","cd","path","resolve","os","tmpdir","timeout","afterAll","exec","out","output","have","entriesCount","indexOf","be","greaterThan"],"mappings":"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","file":"swarm.js","sourcesContent":["import chai, { expect } from 'chai';\nimport { describe, it } from 'mocha';\nimport chaiString from 'chai-string';\nimport os from 'os';\nimport path from 'path';\nimport { runSSHCommand } from '../../../utils';\nimport sh from 'shelljs';\n\nchai.use(chaiString);\nsh.config.silent = false;\nconst servers = require('../../../../tests/fixtures/servers');\n\nfunction cdSwarmProject() {\n  sh.cd(path.resolve(os.tmpdir(), 'tests/project-swarm'));\n}\n\nasync function checkRunning() {\n  const serverInfo = servers.mymeteor;\n\n  const sshService = await runSSHCommand(\n    serverInfo,\n    'docker service inspect myapp-service'\n  );\n\n  expect(sshService.code).to.equal(0);\n\n  const sshOut = await runSSHCommand(\n    serverInfo,\n    'curl localhost:80'\n  );\n\n  expect(sshOut.code).to.equal(0);\n}\n\ndescribe('module - meteor swarm', function() {\n  this.timeout(600000);\n\n  this.afterAll(() => {\n    cdSwarmProject();\n    sh.exec('mup docker destroy-cluster');\n  });\n\n  describe('envconfig', () => {\n    it('should not run when swarm is enabled', async () => {\n      cdSwarmProject();\n      sh.exec('mup setup && mup meteor push --cached-build');\n      const out = sh.exec('mup meteor envconfig');\n\n      expect(out.code).to.equal(0);\n      expect(out.output).to.have.entriesCount('Sending Environment Variables', 0);\n    });\n  });\n\n  describe('start', () => {\n    it('should create service', async () => {\n      cdSwarmProject();\n      sh.exec(\n        'mup setup && mup meteor push --cached-build'\n      );\n\n      const out = sh.exec('mup meteor start');\n\n      expect(out.code).to.equal(0);\n      await checkRunning();\n    });\n  });\n  describe('stop', () => {\n    it('should remove service', async () => {\n      const serverInfo = servers.mymeteor;\n\n      cdSwarmProject();\n      sh.exec(\n        'mup setup && mup meteor deploy --cached-build'\n      );\n\n      const out = sh.exec(\n        'mup meteor stop'\n      );\n\n      expect(out.output).to.have.entriesCount('Stop myapp-service: SUCCESS', 1);\n\n      const sshService = await runSSHCommand(\n        serverInfo,\n        'docker service inspect myapp-service'\n      );\n\n      expect(sshService.code).to.equal(1);\n    });\n  });\n  describe('restart', () => {\n    it('should restart the service', async () => {\n      cdSwarmProject();\n      sh.exec(\n        'mup setup && mup meteor deploy --cached-build'\n      );\n\n      const out = sh.exec(\n        'mup meteor restart'\n      );\n\n      expect(out.output).to.have.entriesCount('Restart myapp-service: SUCCESS', 1);\n      await checkRunning();\n    });\n  });\n  describe('logs', () => {\n    it('should show service logs', async () => {\n      cdSwarmProject();\n      sh.exec(\n        'mup setup && mup meteor deploy --cached-build'\n      );\n      const out = sh.exec(\n        'mup meteor logs --tail 2'\n      );\n\n      expect(out.output.indexOf('=> Staring meteor app on port 3000')).to.be.greaterThan(-1);\n    });\n  });\n});\n"]}