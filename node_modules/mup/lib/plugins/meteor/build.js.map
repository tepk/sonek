{"version":3,"sources":["../../../src/plugins/meteor/build.js"],"names":["buildApp","archiveApp","log","appPath","buildOptions","verbose","api","fs","statSync","resolvePath","e","code","console","process","exit","Promise","resolve","reject","callback","err","buildMeteorApp","executable","args","buildLocation","debug","push","mobileSettings","JSON","stringify","serverOnly","server","allowIncompatibleUpdate","isWin","test","platform","env","comspec","concat","options","cwd","METEOR_HEADLESS","stdio","join","meteor","stdout","pipe","end","stderr","on","cb","bundlePath","tar","c","file","onwarn","message","data","portable","gzip","level"],"mappings":"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","file":"build.js","sourcesContent":["import debug from 'debug';\nimport fs from 'fs';\nimport { spawn } from 'child_process';\nimport tar from 'tar';\n\nconst log = debug('mup:module:meteor');\n\nexport default function buildApp(appPath, buildOptions, verbose, api) {\n  // Check if the folder exists\n  try {\n    fs.statSync(api.resolvePath(appPath));\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      console.log(`${api.resolvePath(appPath)} does not exist`);\n    } else {\n      console.log(e);\n    }\n\n    process.exit(1);\n  }\n\n  // Make sure it is a Meteor app\n  try {\n    // checks for release file since there also is a\n    // .meteor folder in the user's home\n    fs.statSync(api.resolvePath(appPath, '.meteor/release'));\n  } catch (e) {\n    console.log(`${api.resolvePath(appPath)} is not a meteor app`);\n    process.exit(1);\n  }\n\n  return new Promise((resolve, reject) => {\n    const callback = err => {\n      if (err) {\n        reject(err);\n\n        return;\n      }\n      resolve();\n    };\n    buildMeteorApp(appPath, buildOptions, verbose, code => {\n      if (code === 0) {\n        callback();\n\n        return;\n      }\n      console.log('\\n=> Build Error. Check the logs printed above.');\n      process.exit(1);\n    });\n  });\n}\n\nfunction buildMeteorApp(appPath, buildOptions, verbose, callback) {\n  let executable = buildOptions.executable || 'meteor';\n  let args = [\n    'build',\n    '--directory',\n    buildOptions.buildLocation,\n    '--architecture',\n    'os.linux.x86_64'\n  ];\n\n  if (buildOptions.debug) {\n    args.push('--debug');\n  }\n\n  if (buildOptions.mobileSettings) {\n    args.push('--mobile-settings');\n    args.push(JSON.stringify(buildOptions.mobileSettings));\n  }\n\n  if (buildOptions.serverOnly) {\n    args.push('--server-only');\n  } else if (!buildOptions.mobileSettings) {\n    args.push('--mobile-settings');\n    args.push(`${appPath}/settings.json`);\n  }\n\n  if (buildOptions.server) {\n    args.push('--server');\n    args.push(buildOptions.server);\n  }\n\n  if (buildOptions.allowIncompatibleUpdate) {\n    args.push('--allow-incompatible-update');\n  }\n\n  const isWin = /^win/.test(process.platform);\n  if (isWin) {\n    // Sometimes cmd.exe not available in the path\n    // See: http://goo.gl/ADmzoD\n    executable = process.env.comspec || 'cmd.exe';\n    args = ['/c', 'meteor'].concat(args);\n  }\n\n  const options = {\n    cwd: appPath,\n    env: {\n      ...process.env,\n      METEOR_HEADLESS: 1\n    },\n    stdio: verbose ? 'inherit' : 'pipe'\n  };\n\n  log(`Build Path: ${appPath}`);\n  log(`Build Command:  ${executable} ${args.join(' ')}`);\n\n  const meteor = spawn(executable, args, options);\n\n  if (!verbose) {\n    meteor.stdout.pipe(process.stdout, { end: false });\n    meteor.stderr.pipe(process.stderr, { end: false });\n  }\n\n  meteor.on('error', e => {\n    console.log(options);\n    console.log(e);\n    console.log('This error usually happens when meteor is not installed.');\n  });\n  meteor.on('close', callback);\n}\n\nexport function archiveApp(buildLocation, api, cb) {\n  const bundlePath = api.resolvePath(buildLocation, 'bundle.tar.gz');\n\n  log('starting archive');\n  tar.c({\n    file: bundlePath,\n    onwarn(message, data) { console.log(message, data); },\n    cwd: buildLocation,\n    portable: true,\n    gzip: {\n      level: 9\n    }\n  }, ['bundle'], err => {\n    log('archive finished');\n\n    if (err) {\n      console.log('=> Archiving failed: ', err.message);\n    }\n\n    cb(err);\n  });\n}\n"]}