{"version":3,"sources":["../../../src/plugins/meteor/command-handlers.js"],"names":["api","config","getConfig","app","appPath","resolvePath","getBasePath","path","buildOptions","getBuildOptions","rebuild","shouldRebuild","getOptions","console","log","buildLocation","getVerbose","build","runCommand","error","process","exit","bundlePath","archiveApp","list","nodemiral","taskList","copy","src","dest","name","progressBar","enableUploadProgressBar","docker","executeScript","script","__dirname","vars","appName","dockerImage","image","env","buildInstructions","stopApp","stopAppDuringPrepareBundle","sessions","getSessions","runTaskList","series","verbose","push","updateColor","color","overallColor","lines","servers","Object","keys","map","key","server","concurrency","results","urlResults","forEach","result","index","statusColor","restartColor","host","chalk","status","created","restartCount","envVar","exposedPorts","length","port","publishedPorts","urlResult","split","inDocker","remote","local","join","logs","setup","envconfig","start","deploy","stop","restart","tmpBuildPath","rand","random","create","uuidNumbers","i","os","tmpdir","uuid","v4","args","getArgs","shift","getDockerLogs","ssl","autogenerate","basePath","upload","crt","buildCached","fs","existsSync","bindAddress","opts","nginx","bind","dockerImageFrontendServer","imageFrontendServer","imagePort","PORT","sslConfig","logConfig","volumes","proxyConfig","proxy","nginxClientUploadLimit","clientUploadLimit","METEOR_SETTINGS","JSON","stringify","getSettings","hostVars","settings","getSettingsFromPath","then"],"mappings":"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","file":"command-handlers.js","sourcesContent":["import { addStartAppTask, checkAppStarted, prepareBundleSupported } from './utils';\nimport buildApp, { archiveApp } from './build.js';\nimport { checkUrls, getInformation } from './status';\nimport { map, promisify } from 'bluebird';\nimport chalk from 'chalk';\nimport { cloneDeep } from 'lodash';\nimport debug from 'debug';\nimport fs from 'fs';\nimport nodemiral from 'nodemiral';\nimport os from 'os';\nimport random from 'random-seed';\nimport uuid from 'uuid';\n\nconst log = debug('mup:module:meteor');\n\nfunction tmpBuildPath(appPath, api) {\n  const rand = random.create(appPath);\n  const uuidNumbers = [];\n  for (let i = 0; i < 16; i++) {\n    uuidNumbers.push(rand(255));\n  }\n\n  return api.resolvePath(\n    os.tmpdir(),\n    `mup-meteor-${uuid.v4({ random: uuidNumbers })}`\n  );\n}\n\nexport function logs(api) {\n  log('exec => mup meteor logs');\n  const config = api.getConfig().app;\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  const args = api.getArgs();\n  if (args[0] === 'meteor') {\n    args.shift();\n  }\n\n  const sessions = api.getSessions(['app']);\n\n  return api.getDockerLogs(config.name, sessions, args);\n}\n\nexport function setup(api) {\n  log('exec => mup meteor setup');\n  const config = api.getConfig().app;\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  const list = nodemiral.taskList('Setup Meteor');\n\n  list.executeScript('Setup Environment', {\n    script: api.resolvePath(__dirname, 'assets/meteor-setup.sh'),\n    vars: {\n      name: config.name\n    }\n  });\n\n  if (config.ssl && typeof config.ssl.autogenerate !== 'object') {\n    const basePath = api.getBasePath();\n\n    if (config.ssl.upload !== false) {\n      list.executeScript('Cleaning up SSL Certificates', {\n        script: api.resolvePath(__dirname, 'assets/ssl-cleanup.sh'),\n        vars: {\n          name: config.name\n        }\n      });\n      list.copy('Copying SSL Certificate Bundle', {\n        src: api.resolvePath(basePath, config.ssl.crt),\n        dest: `/opt/${config.name}/config/bundle.crt`\n      });\n\n      list.copy('Copying SSL Private Key', {\n        src: api.resolvePath(basePath, config.ssl.key),\n        dest: `/opt/${config.name}/config/private.key`\n      });\n    }\n\n    list.executeScript('Verifying SSL Configurations', {\n      script: api.resolvePath(__dirname, 'assets/verify-ssl-config.sh'),\n      vars: {\n        name: config.name\n      }\n    });\n  }\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nfunction getBuildOptions(api) {\n  const config = api.getConfig().app;\n  const appPath = api.resolvePath(api.getBasePath(), config.path);\n\n  const buildOptions = config.buildOptions || {};\n  buildOptions.buildLocation =\n    buildOptions.buildLocation || tmpBuildPath(appPath, api);\n\n  return buildOptions;\n}\n\nfunction shouldRebuild(api) {\n  let rebuild = true;\n  const { buildLocation } = getBuildOptions(api);\n  const bundlePath = api.resolvePath(buildLocation, 'bundle.tar.gz');\n\n  if (api.getOptions()['cached-build']) {\n    const buildCached = fs.existsSync(bundlePath);\n\n    // If build is not cached, rebuild is true\n    // even though the --cached-build flag was used\n    if (buildCached) {\n      rebuild = false;\n    }\n  }\n\n  return rebuild;\n}\n\nexport async function build(api) {\n  const config = api.getConfig().app;\n  const appPath = api.resolvePath(api.getBasePath(), config.path);\n  const buildOptions = getBuildOptions(api);\n\n  const rebuild = shouldRebuild(api);\n\n  if (rebuild && api.getOptions()['cached-build']) {\n    console.log('Unable to use previous build. It doesn\\'t exist.');\n  } else if (!rebuild) {\n    console.log('Not building app. Using build from previous deploy at');\n    console.log(buildOptions.buildLocation);\n  }\n\n  if (rebuild) {\n    console.log('Building App Bundle Locally');\n    await buildApp(appPath, buildOptions, api.getVerbose(), api);\n  }\n}\n\nexport async function push(api) {\n  log('exec => mup meteor push');\n\n  await api.runCommand('meteor.build');\n\n  const config = api.getConfig().app;\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  const buildOptions = getBuildOptions(api);\n\n  const bundlePath = api.resolvePath(buildOptions.buildLocation, 'bundle.tar.gz');\n\n  if (shouldRebuild(api)) {\n    await promisify(archiveApp)(buildOptions.buildLocation, api);\n  }\n\n  const list = nodemiral.taskList('Pushing Meteor App');\n\n  list.copy('Pushing Meteor App Bundle to the Server', {\n    src: bundlePath,\n    dest: `/opt/${config.name}/tmp/bundle.tar.gz`,\n    progressBar: config.enableUploadProgressBar\n  });\n\n  if (prepareBundleSupported(config.docker)) {\n    list.executeScript('Prepare Bundle', {\n      script: api.resolvePath(\n        __dirname,\n        'assets/prepare-bundle.sh'\n      ),\n      vars: {\n        appName: config.name,\n        dockerImage: config.docker.image,\n        env: config.env,\n        buildInstructions: config.docker.buildInstructions || [],\n        stopApp: config.docker.stopAppDuringPrepareBundle\n      }\n    });\n  }\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  });\n}\n\nexport function envconfig(api) {\n  log('exec => mup meteor envconfig');\n\n  const config = api.getConfig().app;\n  const servers = api.getConfig().servers;\n  let bindAddress = '0.0.0.0';\n\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  config.log = config.log || {\n    opts: {\n      'max-size': '100m',\n      'max-file': 10\n    }\n  };\n\n  config.nginx = config.nginx || {};\n\n  if (config.docker && config.docker.bind) {\n    bindAddress = config.docker.bind;\n  }\n\n  if (config.dockerImageFrontendServer) {\n    config.docker.imageFrontendServer = config.dockerImageFrontendServer;\n  }\n  if (!config.docker.imageFrontendServer) {\n    config.docker.imageFrontendServer = 'meteorhacks/mup-frontend-server';\n  }\n\n  // If imagePort is not set, go with port 80 which was the traditional\n  // port used by kadirahq/meteord and meteorhacks/meteord\n  config.docker.imagePort = config.docker.imagePort || 80;\n\n  if (config.ssl) {\n    config.ssl.port = config.ssl.port || 443;\n  }\n\n  const list = nodemiral.taskList('Configuring App');\n  list.copy('Pushing the Startup Script', {\n    src: api.resolvePath(__dirname, 'assets/templates/start.sh'),\n    dest: `/opt/${config.name}/config/start.sh`,\n    vars: {\n      appName: config.name,\n      port: config.env.PORT || 80,\n      bind: bindAddress,\n      sslConfig: config.ssl,\n      logConfig: config.log,\n      volumes: config.volumes,\n      docker: config.docker,\n      proxyConfig: api.getConfig().proxy,\n      nginxClientUploadLimit: config.nginx.clientUploadLimit || '10M'\n    }\n  });\n\n  const env = cloneDeep(config.env);\n  env.METEOR_SETTINGS = JSON.stringify(api.getSettings());\n  // sending PORT to the docker container is useless.\n\n  // setting PORT in the config is used for the publicly accessible\n  // port.\n\n  // docker.imagePort is used for the port exposed from the container.\n  // In case the docker.imagePort is different than the container's\n  // default port, we set the env PORT to docker.imagePort.\n  env.PORT = config.docker.imagePort;\n\n  const hostVars = {};\n  Object.keys(config.servers).forEach(key => {\n    if (config.servers[key].env) {\n      hostVars[servers[key].host] = { env: config.servers[key].env };\n    }\n    if (config.servers[key].settings) {\n      const settings = JSON.stringify(api.getSettingsFromPath(\n        config.servers[key].settings));\n      if (hostVars[servers[key].host]) {\n        hostVars[servers[key].host].env.METEOR_SETTINGS = settings;\n      } else {\n        hostVars[servers[key].host] = { env: { METEOR_SETTINGS: settings } };\n      }\n    }\n  });\n\n  list.copy('Sending Environment Variables', {\n    src: api.resolvePath(__dirname, 'assets/templates/env.list'),\n    dest: `/opt/${config.name}/config/env.list`,\n    hostVars,\n    vars: {\n      env: env || {},\n      appName: config.name\n    }\n  });\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  });\n}\n\nexport function start(api) {\n  log('exec => mup meteor start');\n  const config = api.getConfig().app;\n\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  const list = nodemiral.taskList('Start Meteor');\n\n  addStartAppTask(list, api);\n  checkAppStarted(list, api);\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  });\n}\n\nexport function deploy(api) {\n  log('exec => mup meteor deploy');\n\n  // validate settings and config before starting\n  api.getSettings();\n  const config = api.getConfig().app;\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  return api\n    .runCommand('meteor.push')\n    .then(() => api.runCommand('default.reconfig'));\n}\n\nexport function stop(api) {\n  log('exec => mup meteor stop');\n  const config = api.getConfig().app;\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  const list = nodemiral.taskList('Stop Meteor');\n\n  list.executeScript('Stop Meteor', {\n    script: api.resolvePath(__dirname, 'assets/meteor-stop.sh'),\n    vars: {\n      appName: config.name\n    }\n  });\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nexport function restart(api) {\n  const list = nodemiral.taskList('Restart Meteor');\n  const sessions = api.getSessions(['app']);\n  const config = api.getConfig().app;\n\n  list.executeScript('Stop Meteor', {\n    script: api.resolvePath(__dirname, 'assets/meteor-stop.sh'),\n    vars: {\n      appName: config.name\n    }\n  });\n\n  addStartAppTask(list, api);\n  checkAppStarted(list, api);\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  });\n}\n\nexport async function status(api) {\n  const config = api.getConfig();\n  const lines = [];\n  const servers = Object.keys(config.app.servers)\n    .map(key => config.servers[key]);\n\n  const results = await map(\n    servers,\n    server => getInformation(server, config.app.name, api),\n    { concurrency: 2 }\n  );\n  const urlResults = await map(\n    servers,\n    server => checkUrls(server, config.app, api),\n    { concurrency: 2 }\n  );\n\n  let overallColor = 'green';\n\n  function updateColor(color) {\n    if (color === 'yellow' && overallColor !== 'red') {\n      overallColor = color;\n    } else if (color === 'red') {\n      overallColor = color;\n    }\n  }\n\n  results.forEach((result, index) => {\n    updateColor(result.statusColor);\n    updateColor(result.restartColor);\n\n    lines.push(` - ${result.host}: ${chalk[result.statusColor](result.status)} `);\n\n    if (result.status === 'Stopped') {\n      return;\n    }\n\n    lines.push(`    Created at ${result.created}`);\n    lines.push(chalk[result.restartColor](`    Restarted ${result.restartCount} times`));\n\n    lines.push('    ENV: ');\n    result.env.forEach(envVar => {\n      lines.push(`     - ${envVar}`);\n    });\n\n    if (result.exposedPorts.length > 0) {\n      lines.push('    Exposed Ports:');\n      result.exposedPorts.forEach(port => {\n        lines.push(`     - ${port}`);\n      });\n    }\n\n    if (result.publishedPorts.length > 0) {\n      lines.push('    Published Ports:');\n      result.publishedPorts.forEach(port => {\n        lines.push(`     - ${port}`);\n      });\n    }\n\n    const urlResult = urlResults[index];\n    if (result.publishedPorts.length > 0) {\n      lines.push(`    App running at http://${result.host}:${result.publishedPorts[0].split('/')[0]}`);\n      lines.push(`     - Available in app's docker container: ${urlResult.inDocker}`);\n      lines.push(`     - Available on server: ${urlResult.remote}`);\n      lines.push(`     - Available on local computer: ${urlResult.local}`);\n    } else {\n      lines.push('    App available through reverse proxy');\n      lines.push(`     - Available in app's docker container: ${urlResult.inDocker}`);\n    }\n  });\n\n  console.log(chalk[overallColor]('\\n=> Meteor Status'));\n  console.log(lines.join('\\n'));\n}\n"]}