{"version":3,"sources":["../../../src/plugins/meteor/index.js"],"names":["prepareConfig","scrubConfig","swarmOptions","_commands","description","commands","validate","meteor","_validator","app","config","utils","type","docker","image","dockerImage","stopAppDuringPrepareBundle","meteorEnabled","api","getConfig","onlyMeteorEnabled","commandNames","index","thenHandler","length","runCommand","then","hooks","map","path","join","update","scrubUrl","node","mongo","url","split","pop","push","labels","Object","keys","servers","reduce","result","server","name"],"mappings":"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","file":"index.js","sourcesContent":["import * as _commands from './commands';\nimport _validator from './validate';\nimport { defaultsDeep } from 'lodash';\nimport traverse from 'traverse';\n\nexport const description = 'Deploy and manage meteor apps';\n\nexport const commands = _commands;\n\nexport const validate = {\n  meteor: _validator,\n  app(config, utils) {\n    if (typeof config.meteor === 'object' || (config.app && config.app.type !== 'meteor')) {\n      // The meteor validator will check the config\n      // Or the config is telling a different app to handle deployment\n      return [];\n    }\n\n    return _validator(config, utils);\n  }\n};\n\nexport function prepareConfig(config) {\n  if (!config.app || config.app.type !== 'meteor') {\n    return config;\n  }\n\n  config.app.docker = defaultsDeep(config.app.docker, {\n    image: config.app.dockerImage || 'kadirahq/meteord',\n    stopAppDuringPrepareBundle: true\n  });\n\n  delete config.app.dockerImage;\n\n  return config;\n}\n\nfunction meteorEnabled(api) {\n  const config = api.getConfig();\n\n  return config.app && config.app.type === 'meteor';\n}\n\nfunction onlyMeteorEnabled(...commandNames) {\n  return function(api) {\n    let index = 0;\n\n    function thenHandler() {\n      index += 1;\n      if (commandNames.length > index) {\n        return api.runCommand(commandNames[index]).then(thenHandler);\n      }\n    }\n\n    if (meteorEnabled(api)) {\n      return api.runCommand(commandNames[index]).then(thenHandler);\n    }\n  };\n}\n\nexport const hooks = {\n  'post.default.setup': onlyMeteorEnabled('meteor.setup'),\n  'post.default.deploy': onlyMeteorEnabled('meteor.deploy'),\n  'post.default.start': onlyMeteorEnabled('meteor.start'),\n  'post.default.stop': onlyMeteorEnabled('meteor.stop'),\n  'post.default.logs': onlyMeteorEnabled('meteor.logs'),\n  'post.default.reconfig': onlyMeteorEnabled('meteor.envconfig', 'meteor.start'),\n  'post.default.restart': onlyMeteorEnabled('meteor.restart'),\n  'post.default.status': onlyMeteorEnabled('meteor.status')\n};\n\nexport function scrubConfig(config, utils) {\n  if (config.meteor) {\n    delete config.meteor;\n  }\n\n  if (config.app) {\n    // eslint-disable-next-line\n    config.app = traverse(config.app).map(function () {\n      const path = this.path.join('.');\n\n      switch (path) {\n        case 'name':\n          return this.update('my-app');\n        case 'buildOptions.server':\n          return this.update(utils.scrubUrl(this.node));\n\n        case 'env.ROOT_URL':\n          return this.update(utils.scrubUrl(this.node));\n\n        case 'env.MONGO_URL':\n          if (config.mongo) {\n            const url = this.node.split('/');\n            url.pop();\n            url.push('my-app');\n\n            return this.update(url.join('/'));\n          }\n\n          return this.update(utils.scrubUrl(this.node));\n\n        // no default\n      }\n    });\n  }\n\n  return config;\n}\n\nexport function swarmOptions(config) {\n  if (config && config.app && config.app.type === 'meteor') {\n    return {\n      labels: Object.keys(config.app.servers).reduce((result, server) => {\n        result[server] = {\n          [`mup-app-${config.app.name}`]: 'true'\n        };\n\n        return result;\n      }, {})\n    };\n  }\n}\n"]}