{"version":3,"sources":["../../../src/plugins/proxy/index.js"],"names":["prepareConfig","swarmOptions","_commands","description","commands","validate","proxy","validator","config","app","env","VIRTUAL_HOST","domains","HTTPS_METHOD","ssl","forceSSL","HTTP_FORWARDED_COUNT","letsEncryptEmail","LETSENCRYPT_HOST","LETSENCRYPT_EMAIL","hooks","api","getConfig","runCommand","dockerSetup","commandHistory","find","name","managers","servers","Object","keys","push"],"mappings":";;;;;;QAWgBA,a,GAAAA,a;QAoCAC,Y,GAAAA,Y;;AA/ChB;;IAAYC,S;;AACZ;;;;;;;;AAEO,IAAMC,oCAAc,wCAApB;;AAEA,IAAMC,8BAAWF,SAAjB;;AAEA,IAAMG,8BAAW;AACtBC,SAAOC;AADe,CAAjB;;AAIA,SAASP,aAAT,CAAuBQ,MAAvB,EAA+B;AACpC,MAAI,CAACA,OAAOC,GAAR,IAAe,CAACD,OAAOF,KAA3B,EAAkC;AAChC,WAAOE,MAAP;AACD;;AAEDA,SAAOC,GAAP,CAAWC,GAAX,GAAiBF,OAAOC,GAAP,CAAWC,GAAX,IAAkB,EAAnC;;AAEAF,SAAOC,GAAP,CAAWC,GAAX,CAAeC,YAAf,GAA8BH,OAAOF,KAAP,CAAaM,OAA3C;AACAJ,SAAOC,GAAP,CAAWC,GAAX,CAAeG,YAAf,GAA8BL,OAAOF,KAAP,CAAaQ,GAAb,IAAoBN,OAAOF,KAAP,CAAaQ,GAAb,CAAiBC,QAArC,GAAgD,UAAhD,GAA6D,YAA3F;AACAP,SAAOC,GAAP,CAAWC,GAAX,CAAeM,oBAAf,GACER,OAAOC,GAAP,CAAWC,GAAX,CAAeM,oBAAf,IAAuC,CADzC;;AAGA,MAAIR,OAAOF,KAAP,CAAaQ,GAAb,IAAoBN,OAAOF,KAAP,CAAaQ,GAAb,CAAiBG,gBAAzC,EAA2D;AACzDT,WAAOC,GAAP,CAAWC,GAAX,CAAeQ,gBAAf,GAAkCV,OAAOF,KAAP,CAAaM,OAA/C;AACAJ,WAAOC,GAAP,CAAWC,GAAX,CAAeS,iBAAf,GAAmCX,OAAOF,KAAP,CAAaQ,GAAb,CAAiBG,gBAApD;AACD;;AAED,SAAOT,MAAP;AACD;;AAEM,IAAMY,wBAAQ;AACnB,uBADmB,6BACGC,GADH,EACQ;AACzB,QAAIA,IAAIC,SAAJ,GAAgBhB,KAApB,EAA2B;AACzBe,UAAIE,UAAJ,CAAe,cAAf;AACD;AACF,GALkB;AAMnB,qBANmB,2BAMCF,GAND,EAMM;AACvB;AACA,QAAMG,cAAcH,IAAII,cAAJ,CAAmBC,IAAnB,CAAwB;AAAA,UAAGC,IAAH,QAAGA,IAAH;AAAA,aAAcA,SAAS,eAAvB;AAAA,KAAxB,CAApB;;AAEA,QAAIN,IAAIC,SAAJ,GAAgBhB,KAAhB,IAAyBkB,WAA7B,EAA0C;AACxC,aAAOH,IAAIE,UAAJ,CAAe,aAAf,CAAP;AACD;AACF;AAbkB,CAAd;;AAgBA,SAAStB,YAAT,CAAsBO,MAAtB,EAA8B;AACnC,MAAIA,UAAUA,OAAOF,KAArB,EAA4B;AAC1B,QAAMsB,WAAW,EAAjB;AACA,QAAMC,UAAUC,OAAOC,IAAP,CAAYvB,OAAOF,KAAP,CAAauB,OAAzB,CAAhB;AACAD,aAASI,IAAT,CAAcH,QAAQ,CAAR,CAAd;;AAEA,WAAO;AACLD;AADK,KAAP;AAGD;AACF","file":"index.js","sourcesContent":["import * as _commands from './commands';\nimport validator from './validate';\n\nexport const description = 'Setup and manage reverse proxy and ssl';\n\nexport const commands = _commands;\n\nexport const validate = {\n  proxy: validator\n};\n\nexport function prepareConfig(config) {\n  if (!config.app || !config.proxy) {\n    return config;\n  }\n\n  config.app.env = config.app.env || {};\n\n  config.app.env.VIRTUAL_HOST = config.proxy.domains;\n  config.app.env.HTTPS_METHOD = config.proxy.ssl && config.proxy.ssl.forceSSL ? 'redirect' : 'noredirect';\n  config.app.env.HTTP_FORWARDED_COUNT =\n    config.app.env.HTTP_FORWARDED_COUNT || 1;\n\n  if (config.proxy.ssl && config.proxy.ssl.letsEncryptEmail) {\n    config.app.env.LETSENCRYPT_HOST = config.proxy.domains;\n    config.app.env.LETSENCRYPT_EMAIL = config.proxy.ssl.letsEncryptEmail;\n  }\n\n  return config;\n}\n\nexport const hooks = {\n  'post.default.status'(api) {\n    if (api.getConfig().proxy) {\n      api.runCommand('proxy.status');\n    }\n  },\n  'post.meteor.setup'(api) {\n    // Only run hook on \"mup setup\"\n    const dockerSetup = api.commandHistory.find(({ name }) => name === 'default.setup');\n\n    if (api.getConfig().proxy && dockerSetup) {\n      return api.runCommand('proxy.setup');\n    }\n  }\n};\n\nexport function swarmOptions(config) {\n  if (config && config.proxy) {\n    const managers = [];\n    const servers = Object.keys(config.proxy.servers);\n    managers.push(servers[0]);\n\n    return {\n      managers\n    };\n  }\n}\n"]}