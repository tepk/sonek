{"version":3,"sources":["../../../src/plugins/proxy/command-handlers.js"],"names":["api","log","command","PROXY_CONTAINER_NAME","getConfig","servers","app","serverObjects","Object","keys","map","serverName","Promise","all","runSSHCommand","server","then","results","forEach","host","output","console","nginxConfig","config","key","lines","overallColor","collectorConfig","nginxDocker","parser","letsEncryptDocker","certificateExpire","stdout","code","split","reduce","result","item","index","items","trim","slice","getServerInfo","serverInfo","values","_host","push","State","Status","NetworkSettings","Ports","HostPort","length","chalk","join","status","logs","leLogs","setup","reconfigShared","start","stop","proxy","error","process","exit","args","getArgs","sessions","getSessions","getDockerLogs","appName","name","list","nodemiral","taskList","domains","executeScript","script","resolvePath","__dirname","vars","copy","src","dest","letsEncryptEmail","ssl","nginxServerConfig","fs","readFileSync","getBasePath","toString","nginxLocationConfig","hasServerConfig","hasLocationConfig","serverConfig","locationConfig","proxyName","clientUploadLimit","upload","crt","runTaskList","series","verbose","getVerbose","runCommand","shared","httpPort","httpsPort","env","envLetsEncrypt","sharedNginxConfig"],"mappings":"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","file":"command-handlers.js","sourcesContent":["import chalk from 'chalk';\nimport { clone } from 'lodash';\nimport debug from 'debug';\nimport fs from 'fs';\nimport nodemiral from 'nodemiral';\n\nconst log = debug('mup:module:proxy');\nconst PROXY_CONTAINER_NAME = 'mup-nginx-proxy';\n\nexport function logs(api) {\n  log('exec => mup proxy logs');\n  const config = api.getConfig().proxy;\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const args = api.getArgs().slice(1);\n  const sessions = api.getSessions(['app']);\n\n  return api.getDockerLogs(PROXY_CONTAINER_NAME, sessions, args);\n}\n\nexport function leLogs(api) {\n  log('exec => mup proxy le-logs');\n  const config = api.getConfig().proxy;\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const args = api.getArgs().slice(1);\n  args[0] = 'logs';\n  const sessions = api.getSessions(['app']);\n\n  return api.getDockerLogs(\n    `${PROXY_CONTAINER_NAME}-letsencrypt`,\n    sessions,\n    args\n  );\n}\n\nexport function setup(api) {\n  log('exec => mup proxy setup');\n  const config = api.getConfig().proxy;\n  const appName = api.getConfig().app.name;\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const list = nodemiral.taskList('Setup proxy');\n  const domains = config.domains.split(',');\n\n  list.executeScript('Setup Environment', {\n    script: api.resolvePath(__dirname, 'assets/proxy-setup.sh'),\n    vars: {\n      name: PROXY_CONTAINER_NAME\n    }\n  });\n\n  list.copy('Pushing the Startup Script', {\n    src: api.resolvePath(__dirname, 'assets/templates/start.sh'),\n    dest: `/opt/${PROXY_CONTAINER_NAME}/config/start.sh`,\n    vars: {\n      appName: PROXY_CONTAINER_NAME,\n      letsEncryptEmail: config.ssl ? config.ssl.letsEncryptEmail : null\n    }\n  });\n\n  let nginxServerConfig = '';\n  if (config.nginxServerConfig) {\n    nginxServerConfig = fs.readFileSync(\n      api.resolvePath(api.getBasePath(), config.nginxServerConfig)\n    ).toString('utf8');\n  }\n\n  let nginxLocationConfig = '';\n  if (config.nginxLocationConfig) {\n    nginxLocationConfig = fs.readFileSync(\n      api.resolvePath(api.getBasePath(), config.nginxLocationConfig)\n    ).toString('utf8');\n  }\n\n  list.executeScript('Pushing Nginx Config', {\n    script: api.resolvePath(__dirname, 'assets/nginx-config.sh'),\n    vars: {\n      hasServerConfig: config.nginxServerConfig,\n      hasLocationConfig: config.nginxLocationConfig,\n      serverConfig: nginxServerConfig,\n      locationConfig: nginxLocationConfig,\n      domains,\n      proxyName: PROXY_CONTAINER_NAME,\n      clientUploadLimit: config.clientUploadLimit || '10M'\n    }\n  });\n\n  list.executeScript('Cleaning Up SSL Certificates', {\n    script: api.resolvePath(__dirname, 'assets/ssl-cleanup.sh'),\n    vars: {\n      name: appName,\n      proxyName: PROXY_CONTAINER_NAME\n    }\n  });\n\n  if (\n    config.ssl &&\n    !config.ssl.letsEncryptEmail &&\n    config.ssl.upload !== false &&\n    config.ssl.crt\n  ) {\n    list.copy('Copying SSL Certificate Bundle', {\n      src: api.resolvePath(api.getBasePath(), config.ssl.crt),\n      dest: `/opt/${appName}/config/bundle.crt`\n    });\n    list.copy('Copying SSL Private Key', {\n      src: api.resolvePath(api.getBasePath(), config.ssl.key),\n      dest: `/opt/${appName}/config/private.key`\n    });\n    list.executeScript('Setup SSL Certificates for Domains', {\n      script: api.resolvePath(__dirname, 'assets/ssl-setup.sh'),\n      vars: {\n        appName,\n        proxyName: PROXY_CONTAINER_NAME,\n        domains\n      }\n    });\n  }\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.getVerbose()\n  }).then(() => api.runCommand('proxy.start'));\n}\n\nexport function reconfigShared(api) {\n  const config = api.getConfig().proxy;\n  const shared = config.shared || {};\n\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  console.log('The shared settings affect all apps using this reverse proxy.');\n\n  if (Object.keys(shared).length === 0) {\n    console.log('No shared config properties are set. Resetting proxy to defaults.');\n  }\n\n  const list = nodemiral.taskList('Configuring Proxy\\'s Shared Settings');\n\n  list.copy('Sending shared variables', {\n    src: api.resolvePath(__dirname, 'assets/templates/shared-config.sh'),\n    dest: `/opt/${PROXY_CONTAINER_NAME}/config/shared-config.sh`,\n    vars: {\n      httpPort: shared.httpPort,\n      httpsPort: shared.httpsPort,\n      clientUploadLimit: shared.clientUploadLimit\n    }\n  });\n\n  const env = clone(shared.env);\n\n  list.copy('Sending proxy environment variables', {\n    src: api.resolvePath(__dirname, 'assets/templates/env.list'),\n    dest: `/opt/${PROXY_CONTAINER_NAME}/config/env.list`,\n    vars: {\n      env: env || {}\n    }\n  });\n\n  const envLetsEncrypt = clone(shared.envLetsEncrypt);\n\n  list.copy('Sending let\\'s encrypt environment variables', {\n    src: api.resolvePath(__dirname, 'assets/templates/env.list'),\n    dest: `/opt/${PROXY_CONTAINER_NAME}/config/env_letsencrypt.list`,\n    vars: {\n      env: envLetsEncrypt || {}\n    }\n  });\n\n  const sharedNginxConfig = shared.nginxConfig || api.resolvePath(__dirname, 'assets/proxy.conf');\n  list.copy('Sending nginx config', {\n    src: sharedNginxConfig,\n    dest: `/opt/${PROXY_CONTAINER_NAME}/config/nginx-default.conf`\n  });\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.verbose\n  }).then(() => api.runCommand('proxy.start'));\n}\n\nexport function start(api) {\n  log('exec => mup proxy start');\n  const config = api.getConfig().proxy;\n  if (!config) {\n    console.error('error: no configs found for proxy');\n    process.exit(1);\n  }\n\n  const list = nodemiral.taskList('Start proxy');\n\n  list.executeScript('Start proxy', {\n    script: api.resolvePath(__dirname, 'assets/proxy-start.sh'),\n    vars: {\n      appName: PROXY_CONTAINER_NAME\n    }\n  });\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, {\n    series: true,\n    verbose: api.getVerbose()\n  });\n}\n\nexport function stop(api) {\n  log('exec => mup proxy stop');\n\n  const list = nodemiral.taskList('Stop proxy');\n\n  list.executeScript('Stop proxy', {\n    script: api.resolvePath(__dirname, 'assets/proxy-stop.sh'),\n    vars: {\n      appName: PROXY_CONTAINER_NAME\n    }\n  });\n\n  const sessions = api.getSessions(['app']);\n\n  return api.runTaskList(list, sessions, { verbose: api.getVerbose() });\n}\n\nexport async function nginxConfig(api) {\n  log('exec => mup proxy nginx-config');\n\n  const command = `docker exec ${PROXY_CONTAINER_NAME} cat /etc/nginx/conf.d/default.conf`;\n  const { servers, app } = api.getConfig();\n  const serverObjects = Object.keys(app.servers)\n    .map(serverName => servers[serverName]);\n\n\n  await Promise.all(\n    serverObjects.map(server =>\n      api.runSSHCommand(server, command)\n    )\n  ).then(results => {\n    results.forEach(({ host, output }) => {\n      console.log(`===== ${host} ======`);\n      console.log(output);\n    });\n  });\n}\n\nexport async function status(api) {\n  const config = api.getConfig();\n  const servers = Object.keys(config.app.servers)\n    .map(key => config.servers[key]);\n  const lines = [];\n  let overallColor = 'green';\n\n  const collectorConfig = {\n    nginxDocker: {\n      command: `docker inspect ${PROXY_CONTAINER_NAME} --format \"{{json .}}\"`,\n      parser: 'json'\n    },\n    letsEncryptDocker: {\n      command: `docker inspect ${PROXY_CONTAINER_NAME}-letsencrypt --format \"{{json .}}\"`,\n      parser: 'json'\n    },\n    certificateExpire: {\n      command: `cd /opt/${PROXY_CONTAINER_NAME}/mounted-certs && find . -name '*.chain.pem' -exec echo '{}' \\\\; -exec openssl x509 -enddate -noout -in '{}' \\\\;`,\n      parser(stdout, code) {\n        if (code === 0) {\n          return stdout.split('\\n').reduce((result, item, index, items) => {\n            if (!(index % 2) && item.trim() !== '') {\n              result[item.slice(2)] = items[index + 1].split('=')[1];\n            }\n\n            return result;\n          }, {});\n        }\n\n        return null;\n      }\n    }\n  };\n\n  const serverInfo = await api.getServerInfo(servers, collectorConfig);\n\n  Object.values(serverInfo).forEach(\n    ({ _host, nginxDocker, letsEncryptDocker, certificateExpire }) => {\n      lines.push(` - ${_host}:`);\n      lines.push('   - NGINX:');\n      lines.push(`     - Status: ${nginxDocker ? nginxDocker.State.Status : 'Stopped'}`);\n\n      if (nginxDocker && nginxDocker.State.Status !== 'running') {\n        overallColor = 'red';\n      }\n\n      if (nginxDocker) {\n        lines.push('     - Ports:');\n        Object.keys(nginxDocker.NetworkSettings.Ports || {}).forEach(key => {\n          if (key === '443/tcp') {\n            lines.push(`       - HTTPS: ${nginxDocker.NetworkSettings.Ports[key][0].HostPort}`);\n          } else if (key === '80/tcp') {\n            lines.push(`       - HTTP: ${nginxDocker.NetworkSettings.Ports[key][0].HostPort}`);\n          }\n        });\n      }\n\n      lines.push('   - Let\\'s Encrypt');\n      lines.push(`     - Status: ${letsEncryptDocker ? letsEncryptDocker.State.Status : 'Stopped'}`);\n\n      if (letsEncryptDocker && letsEncryptDocker.State.Status !== 'running') {\n        overallColor = 'red';\n      }\n\n      if (certificateExpire && certificateExpire.length > 0) {\n        lines.push('     - Certificates');\n        Object.keys(certificateExpire).forEach(key => {\n          lines.push(`       - ${key}: ${certificateExpire[key]}`);\n        });\n      }\n    });\n\n  console.log(chalk[overallColor]('\\n=> Reverse Proxy Status'));\n  console.log(lines.join('\\n'));\n}\n"]}