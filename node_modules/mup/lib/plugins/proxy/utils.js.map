{"version":3,"sources":["../../../src/plugins/proxy/utils.js"],"names":["getSessions","addProxyEnv","normalizeUrl","api","proxyConfig","getConfig","proxy","servers","config","env","sslConfig","ssl","VIRTUAL_HOST","domains","HTTPS_METHOD","forceSSL","letsEncryptEmail","LETSENCRYPT_HOST","app","LETSENCRYPT_EMAIL","_config","isHttpUrl","RegExp","test","ROOT_URL","urlArray","split","join"],"mappings":";;;;;QAAgBA,W,GAAAA,W;QAUAC,W,GAAAA,W;QAcAC,Y,GAAAA,Y;AAxBT,SAASF,WAAT,CAAqBG,GAArB,EAA0B;AAC/B,MAAMC,cAAcD,IAAIE,SAAJ,GAAgBC,KAApC;;AAEA,MAAIF,YAAYG,OAAhB,EAAyB;AACvB,WAAOJ,IAAIH,WAAJ,CAAgB,CAAC,OAAD,CAAhB,CAAP;AACD;;AAED,SAAOG,IAAIH,WAAJ,CAAgB,CAAC,KAAD,CAAhB,CAAP;AACD;;AAEM,SAASC,WAAT,CAAqBO,MAArB,EAA6BC,GAA7B,EAAkC;AACvC,MAAMC,YAAYF,OAAOF,KAAP,CAAaK,GAA/B;;AAEAF,MAAIG,YAAJ,GAAmBJ,OAAOF,KAAP,CAAaO,OAAhC;AACAJ,MAAIK,YAAJ,GAAmBJ,aAAaA,UAAUK,QAAvB,GAAkC,UAAlC,GAA+C,YAAlE;;AAEA,MAAIL,aAAaA,UAAUM,gBAA3B,EAA6C;AAC3CP,QAAIQ,gBAAJ,GAAuBT,OAAOF,KAAP,CAAaO,OAApC;AACAL,WAAOU,GAAP,CAAWT,GAAX,CAAeU,iBAAf,GAAmCT,UAAUM,gBAA7C;AACD;;AAED,SAAOP,GAAP;AACD;;AAEM,SAASP,YAAT,CAAsBM,MAAtB,EAA8BC,GAA9B,EAAmC;AACxC,MAAMW,UAAUZ,MAAhB;AACA,MAAME,YAAYF,OAAOF,KAAP,CAAaK,GAA/B;AACA,MAAMU,YAAY,IAAIC,MAAJ,CAAW,YAAX,EAAyB,GAAzB,EAA8BC,IAA9B,CAAmCd,IAAIe,QAAvC,CAAlB;;AAEA,MAAId,aAAaW,SAAjB,EAA4B;AAC1B,QAAMI,WAAWL,QAAQF,GAAR,CAAYT,GAAZ,CAAgBe,QAAhB,CAAyBE,KAAzB,CAA+B,GAA/B,CAAjB;;AAEAD,aAAS,CAAT,IAAiBA,SAAS,CAAT,CAAjB;AACAL,YAAQF,GAAR,CAAYT,GAAZ,CAAgBe,QAAhB,GAA2BC,SAASE,IAAT,CAAc,EAAd,CAA3B;AACD;;AAED,SAAOP,QAAQF,GAAR,CAAYT,GAAZ,CAAgBe,QAAvB;AACD","file":"utils.js","sourcesContent":["export function getSessions(api) {\n  const proxyConfig = api.getConfig().proxy;\n\n  if (proxyConfig.servers) {\n    return api.getSessions(['proxy']);\n  }\n\n  return api.getSessions(['app']);\n}\n\nexport function addProxyEnv(config, env) {\n  const sslConfig = config.proxy.ssl;\n\n  env.VIRTUAL_HOST = config.proxy.domains;\n  env.HTTPS_METHOD = sslConfig && sslConfig.forceSSL ? 'redirect' : 'noredirect';\n\n  if (sslConfig && sslConfig.letsEncryptEmail) {\n    env.LETSENCRYPT_HOST = config.proxy.domains;\n    config.app.env.LETSENCRYPT_EMAIL = sslConfig.letsEncryptEmail;\n  }\n\n  return env;\n}\n\nexport function normalizeUrl(config, env) {\n  const _config = config;\n  const sslConfig = config.proxy.ssl;\n  const isHttpUrl = new RegExp('^(http)://', 'i').test(env.ROOT_URL);\n\n  if (sslConfig && isHttpUrl) {\n    const urlArray = _config.app.env.ROOT_URL.split(':');\n\n    urlArray[0] = `${urlArray[0]}s:`;\n    _config.app.env.ROOT_URL = urlArray.join('');\n  }\n\n  return _config.app.env.ROOT_URL;\n}\n"]}