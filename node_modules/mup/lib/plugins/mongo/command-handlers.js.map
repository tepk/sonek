{"version":3,"sources":["../../../src/plugins/mongo/command-handlers.js"],"names":["api","config","getConfig","mongo","mongoServer","Object","keys","servers","server","runSSHCommand","dockerStatus","output","mongoCommand","mongoStatus","JSON","parse","console","log","chalk","red","mongoVersion","version","connections","current","storageEngine","name","containerStatus","statusColor","createdTime","restartCount","restartCountColor","overallColor","trim","info","State","Status","Restarting","Running","hour","Created","upTime","Date","FinishedAt","getTime","RestartCount","host","status","logs","setup","start","stop","args","getArgs","sessions","getSessions","shift","getDockerLogs","mongoSessions","meteorSessions","length","_host","list","nodemiral","taskList","executeScript","script","resolvePath","__dirname","copy","src","dest","runTaskList","verbose","vars","mongoDbDir"],"mappings":"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","file":"command-handlers.js","sourcesContent":["import chalk from 'chalk';\nimport debug from 'debug';\nimport nodemiral from 'nodemiral';\n\nconst log = debug('mup:module:mongo');\n\nexport function logs(api) {\n  log('exec => mup mongo logs');\n\n  const args = api.getArgs();\n  const sessions = api.getSessions(['mongo']);\n\n  // remove mongo from args sent to docker\n  args.shift();\n\n  return api.getDockerLogs('mongodb', sessions, args);\n}\n\nexport function setup(api) {\n  log('exec => mup mongo setup');\n\n  if (!api.getConfig().mongo) {\n    // could happen when running \"mup mongo setup\"\n    console.log(\n      'Not setting up built-in mongodb since there is no mongo config'\n    );\n\n    return;\n  }\n\n  const mongoSessions = api.getSessions(['mongo']);\n  const meteorSessions = api.getSessions(['app']);\n\n  if (meteorSessions.length !== 1) {\n    console.log(\n      'To use mup built-in mongodb setup, you should have only one meteor app server. To have more app servers, use an external mongodb setup'\n    );\n\n    return;\n  } else if (mongoSessions[0]._host !== meteorSessions[0]._host) {\n    console.log(\n      'To use mup built-in mongodb setup, you should have both meteor app and mongodb on the same server'\n    );\n\n    return;\n  }\n\n  const list = nodemiral.taskList('Setup Mongo');\n\n  list.executeScript('Setup Environment', {\n    script: api.resolvePath(__dirname, 'assets/mongo-setup.sh')\n  });\n\n  list.copy('Copying mongodb.conf', {\n    src: api.resolvePath(__dirname, 'assets/mongodb.conf'),\n    dest: '/opt/mongodb/mongodb.conf'\n  });\n\n  const sessions = api.getSessions(['mongo']);\n\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nexport function start(api) {\n  log('exec => mup mongo start');\n\n  const mongoSessions = api.getSessions(['mongo']);\n  const meteorSessions = api.getSessions(['app']);\n  const config = api.getConfig().mongo;\n\n  if (\n    meteorSessions.length !== 1 ||\n    mongoSessions[0]._host !== meteorSessions[0]._host\n  ) {\n    log('Skipping mongodb start. Incompatible config');\n\n    return;\n  }\n\n  const list = nodemiral.taskList('Start Mongo');\n\n  list.executeScript('Start Mongo', {\n    script: api.resolvePath(__dirname, 'assets/mongo-start.sh'),\n    vars: {\n      mongoVersion: config.version || '3.4.1',\n      mongoDbDir: '/var/lib/mongodb'\n    }\n  });\n\n  const sessions = api.getSessions(['mongo']);\n\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nexport function stop(api) {\n  log('exec => mup mongo stop');\n  const list = nodemiral.taskList('Stop Mongo');\n\n  list.executeScript('stop mongo', {\n    script: api.resolvePath(__dirname, 'assets/mongo-stop.sh')\n  });\n\n  const sessions = api.getSessions(['mongo']);\n\n  return api.runTaskList(list, sessions, { verbose: api.verbose });\n}\n\nexport async function status(api) {\n  const config = api.getConfig();\n\n  if (!config.mongo) {\n    return;\n  }\n  const mongoServer = Object.keys(config.mongo.servers)[0];\n  const server = config.servers[mongoServer];\n\n  const { output: dockerStatus } = await api.runSSHCommand(\n    server,\n    'docker inspect mongodb --format \"{{json .}}\"'\n  );\n  const mongoCommand = '\"JSON.stringify(db.runCommand({serverStatus: 1, metrics: 0, wiredTiger: 1}))\"';\n  let {\n    output: mongoStatus\n  } = await api.runSSHCommand(\n    server,\n    `docker exec mongodb mongo --eval ${mongoCommand} --quiet`\n  );\n\n  try {\n    mongoStatus = JSON.parse(mongoStatus);\n  } catch (e) {\n    console.log(chalk.red('\\n=> Mongo Status'));\n    console.log(chalk.red(' - Stopped'));\n\n    return;\n  }\n\n  const mongoVersion = mongoStatus.version;\n  const connections = mongoStatus.connections.current;\n  const storageEngine = mongoStatus.storageEngine.name;\n\n  let containerStatus;\n  let statusColor = 'green';\n  let createdTime;\n  let restartCount = 0;\n  let restartCountColor = 'green';\n  let overallColor = 'green';\n\n  if (dockerStatus.trim() === '') {\n    containerStatus = 'Not started';\n    statusColor = 'red';\n  } else {\n    const info = JSON.parse(dockerStatus);\n    containerStatus = info.State.Status;\n\n    if (info.State.Restarting) {\n      statusColor = 'yellow';\n    } else if (info.State.Running !== true) {\n      statusColor = 'red';\n    }\n\n    const hour = 1000 * 60 * 60;\n    createdTime = info.Created;\n    const upTime = new Date(info.State.FinishedAt).getTime() -\n     new Date(info.Created).getTime();\n    restartCount = info.RestartCount;\n\n    if (restartCount > 0 && upTime / hour <= restartCount) {\n      restartCountColor = 'red';\n    } else if (restartCount > 1) {\n      restartCountColor = 'yellow';\n    }\n  }\n\n  if (\n    statusColor === 'green' &&\n    restartCountColor === 'green'\n  ) {\n    overallColor = 'green';\n  } else {\n    console.log('status', statusColor === 'green');\n    console.log('restart', restartCountColor === 'green');\n    overallColor = 'red';\n  }\n\n  console.log(chalk[overallColor]('\\n=> Mongo Status'));\n  console.log(chalk[statusColor](`  ${containerStatus} on server ${server.host}`));\n  console.log(chalk[restartCountColor](`  Restarted ${restartCount} times`));\n  console.log(`  Running since ${createdTime}`);\n  console.log(`  Version: ${mongoVersion}`);\n  console.log(`  Connections: ${connections}`);\n  console.log(`  Storage Engine: ${storageEngine}`);\n}\n"]}