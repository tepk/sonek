{"version":3,"sources":["../../../src/plugins/mongo/validate.js"],"names":["config","combineErrorDetails","serversExist","addLocation","VALIDATE_OPTIONS","origionalConfig","_origionalConfig","details","validationErrors","joi","validate","mongo","schema","servers","externalMongoUrl","app","meteor","object","keys","oplog","bool","port","number","version","string","required","appConfig","result","env","MONGO_URL","mongoUrl","periodExists","indexOf","atExists","push","message","path"],"mappings":";;;;;;kBAoCe,UACbA,MADa,QAQb;AAAA,MALEC,mBAKF,QALEA,mBAKF;AAAA,MAJEC,YAIF,QAJEA,YAIF;AAAA,MAHEC,WAGF,QAHEA,WAGF;AAAA,MAFEC,gBAEF,QAFEA,gBAEF;;AACA,MAAMC,kBAAkBL,OAAOM,gBAA/B;AACA,MAAIC,UAAU,EAAd;;AAEA,MAAMC,mBAAmBC,cAAIC,QAAJ,CAAaV,OAAOW,KAApB,EAA2BC,MAA3B,EAAmCR,gBAAnC,CAAzB;AACAG,YAAUN,oBAAoBM,OAApB,EAA6BC,gBAA7B,CAAV;AACAD,YAAUN,oBACRM,OADQ,EAERL,aAAaF,OAAOa,OAApB,EAA6Bb,OAAOW,KAAP,CAAaE,OAA1C,CAFQ,CAAV;AAIAN,YAAUN,oBACRM,OADQ,EAERO,iBAAiBT,gBAAgBU,GAAhB,IAAuBV,gBAAgBW,MAAxD,CAFQ,CAAV;;AAKA,SAAOb,YAAYI,OAAZ,EAAqB,OAArB,CAAP;AACD,C;;AA5DD;;;;;;AAEA,IAAMK,SAASH,cAAIQ,MAAJ,GAAaC,IAAb,CAAkB;AAC/B;AACA;AACA;AACAC,SAAOV,cAAIW,IAAJ,EAJwB;AAK/BC,QAAMZ,cAAIa,MAAJ,EALyB;AAM/BC,WAASd,cAAIe,MAAJ,EANsB;AAO/BX,WAASJ,cAAIQ,MAAJ,GAAaC,IAAb,GAAoBO,QAApB;AAPsB,CAAlB,CAAf;;AAUA,SAASX,gBAAT,CAA0BY,SAA1B,EAAqC;AACnC,MAAMC,SAAS,EAAf;;AAEA,MAAI,CAACD,SAAD,IAAc,CAACA,UAAUE,GAAzB,IAAgC,CAACF,UAAUE,GAAV,CAAcC,SAAnD,EAA8D;AAC5D,WAAOF,MAAP;AACD;;AAED,MAAMG,WAAWJ,UAAUE,GAAV,CAAcC,SAA/B;;AAEA;AACA,MAAME,eAAeD,SAASE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAA9C;AACA;AACA,MAAMC,WAAWH,SAASE,OAAT,CAAiB,GAAjB,IAAwB,CAAC,CAA1C;;AAEA,MAAKD,gBAAgBE,QAArB,EAAgC;AAC9BN,WAAOO,IAAP,CAAY;AACVC,eAAS,mHADC;AAEVC,YAAM;AAFI,KAAZ;AAID;;AAED,SAAOT,MAAP;AACD","file":"validate.js","sourcesContent":["import joi from 'joi';\n\nconst schema = joi.object().keys({\n  // TODO: mongo.oplog and mongo.port is unused,\n  // but was part of the example config.\n  // decide what to do with it\n  oplog: joi.bool(),\n  port: joi.number(),\n  version: joi.string(),\n  servers: joi.object().keys().required()\n});\n\nfunction externalMongoUrl(appConfig) {\n  const result = [];\n\n  if (!appConfig || !appConfig.env || !appConfig.env.MONGO_URL) {\n    return result;\n  }\n\n  const mongoUrl = appConfig.env.MONGO_URL;\n\n  // Detect IP Addresses and domain names\n  const periodExists = mongoUrl.indexOf('.') > -1;\n  // Detect username:password@domain.com\n  const atExists = mongoUrl.indexOf('@') > -1;\n\n  if ( periodExists || atExists ) {\n    result.push({\n      message: 'It looks like app.env.MONGO_URL is for an external database. Remove the `mongo` object to use external databases.',\n      path: ''\n    });\n  }\n\n  return result;\n}\n\nexport default function(\n  config,\n  {\n    combineErrorDetails,\n    serversExist,\n    addLocation,\n    VALIDATE_OPTIONS\n  }\n) {\n  const origionalConfig = config._origionalConfig;\n  let details = [];\n\n  const validationErrors = joi.validate(config.mongo, schema, VALIDATE_OPTIONS);\n  details = combineErrorDetails(details, validationErrors);\n  details = combineErrorDetails(\n    details,\n    serversExist(config.servers, config.mongo.servers)\n  );\n  details = combineErrorDetails(\n    details,\n    externalMongoUrl(origionalConfig.app || origionalConfig.meteor)\n  );\n\n  return addLocation(details, 'mongo');\n}\n"]}