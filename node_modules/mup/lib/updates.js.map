{"version":3,"sources":["../src/updates.js"],"names":["log","Promise","params","timeout","package","pkg","name","auth","npm","Npm","uri","distTags","fetch","err","res","resolve","showStable","npmVersion","latest","nextVersion","next","local","version","split","slice","map","Number","n","remote","push","beta","length","available","command","text","chalk","green","console","padding","margin","align","borderColor"],"mappings":";;;;;;kBAQe,YAAW;AACxBA,MAAI,sBAAJ;;AAEA,SAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC5B,QAAMC,SAAS;AACbC,eAAS,IADI;AAEbC,eAASC,kBAAIC,IAFA;AAGbC,YAAM;AAHO,KAAf;;AAMA,QAAMC,MAAM,IAAIC,iCAAJ,EAAZ;AACA,QAAMC,MAAM,gCAAZ;AACAF,QAAIG,QAAJ,CAAaC,KAAb,CAAmBF,GAAnB,EAAwBR,MAAxB,EAAgC,UAACW,GAAD,EAAMC,GAAN,EAAc;AAC5C,UAAID,GAAJ,EAAS;AACPE;;AAEA;AACD;;AAED,UAAIC,aAAa,IAAjB;;AAEA,UAAMC,aAAaH,IAAII,MAAvB;AACA,UAAMC,cAAcL,IAAIM,IAAxB;;AAEA,UAAMC,QAAQhB,kBAAIiB,OAAJ,CAAYC,KAAZ,CAAkB,GAAlB,EAAuBC,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,EACXC,GADW,CACP;AAAA,eAAKC,OAAOC,EAAEJ,KAAF,CAAQ,GAAR,EAAa,CAAb,CAAP,CAAL;AAAA,OADO,CAAd;AAEA,UAAMK,SAASX,WAAWM,KAAX,CAAiB,GAAjB,EAAsBE,GAAtB,CAA0B;AAAA,eAAKC,OAAOC,EAAEJ,KAAF,CAAQ,GAAR,EAAa,CAAb,CAAP,CAAL;AAAA,OAA1B,CAAf;AACA,UAAMH,OAAOD,YAAYI,KAAZ,CAAkB,GAAlB,EAAuBE,GAAvB,CAA2B;AAAA,eAAKC,OAAOC,EAAEJ,KAAF,CAAQ,GAAR,EAAa,CAAb,CAAP,CAAL;AAAA,OAA3B,CAAb;AACAH,WAAKS,IAAL,CAAUV,YAAYI,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,EAA0BA,KAA1B,CAAgC,MAAhC,EAAwC,CAAxC,CAAV;;AAEA,UAAMO,OAAOzB,kBAAIiB,OAAJ,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,EAA0BA,KAA1B,CAAgC,GAAhC,EAAqCQ,MAArC,GAA8C,CAA3D;;AAEA,UAAID,IAAJ,EAAU;AACRT,cAAMQ,IAAN,CAAWxB,kBAAIiB,OAAJ,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,EAA0BA,KAA1B,CAAgC,MAAhC,EAAwC,CAAxC,CAAX;AACD;;AAED,UAAIS,YAAYJ,OAAO,CAAP,IAAYP,MAAM,CAAN,CAAZ,IACdO,OAAO,CAAP,MAAcP,MAAM,CAAN,CAAd,IAA0BO,OAAO,CAAP,IAAYP,MAAM,CAAN,CADxB,IAEdO,OAAO,CAAP,MAAcP,MAAM,CAAN,CAAd,IAA0BO,OAAO,CAAP,IAAYP,MAAM,CAAN,CAFxC;;AAIA,UAAIS,QAAQ,CAACE,SAAb,EAAwB;AACtB;AACAA,oBAAYJ,OAAO,CAAP,MAAcP,MAAM,CAAN,CAAd,IACVO,OAAO,CAAP,MAAcP,MAAM,CAAN,CADJ,IAEVO,OAAO,CAAP,MAAcP,MAAM,CAAN,CAFhB;AAGD;;AAED,UAAIS,QAAQ,CAACE,SAAb,EAAwB;AACtBA,oBAAYZ,KAAK,CAAL,IAAUC,MAAM,CAAN,CAAtB;AACAL,qBAAa,KAAb;AACD;;AAED,UAAIgB,SAAJ,EAAe;AACb,YAAMV,UAAUN,aAAaC,UAAb,GAA0BE,WAA1C;AACA,YAAMc,UAAUjB,aAAa,cAAb,GAA8B,mBAA9C;;AAEA,YAAIkB,6BAA2B7B,kBAAIiB,OAA/B,YAA6CA,OAAjD;AACAY,sCAA4BC,gBAAMC,KAAN,CAAYH,OAAZ,CAA5B;AACAI,gBAAQrC,GAAR,CACE,qBAAMkC,IAAN,EAAY;AACVI,mBAAS,CADC;AAEVC,kBAAQ,CAFE;AAGVC,iBAAO,QAHG;AAIVC,uBAAa;AAJH,SAAZ,CADF;AAQD;;AAED1B;AACD,KAzDD;AA0DD,GAnEM,CAAP;AAoED,C;;AA/ED;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMf,MAAM,qBAAM,aAAN,CAAZ","file":"updates.js","sourcesContent":["import boxen from 'boxen';\nimport chalk from 'chalk';\nimport debug from 'debug';\nimport Npm from 'silent-npm-registry-client';\nimport pkg from '../package.json';\n\nconst log = debug('mup:updates');\n\nexport default function() {\n  log('checking for updates');\n\n  return new Promise(resolve => {\n    const params = {\n      timeout: 1000,\n      package: pkg.name,\n      auth: {}\n    };\n\n    const npm = new Npm();\n    const uri = 'https://registry.npmjs.org/npm';\n    npm.distTags.fetch(uri, params, (err, res) => {\n      if (err) {\n        resolve();\n\n        return;\n      }\n\n      let showStable = true;\n\n      const npmVersion = res.latest;\n      const nextVersion = res.next;\n\n      const local = pkg.version.split('.').slice(0, 3)\n        .map(n => Number(n.split('-')[0]));\n      const remote = npmVersion.split('.').map(n => Number(n.split('-')[0]));\n      const next = nextVersion.split('.').map(n => Number(n.split('-')[0]));\n      next.push(nextVersion.split('.')[2].split('beta')[1]);\n\n      const beta = pkg.version.split('.')[2].split('-').length > 1;\n\n      if (beta) {\n        local.push(pkg.version.split('.')[2].split('beta')[1]);\n      }\n\n      let available = remote[0] > local[0] ||\n        remote[0] === local[0] && remote[1] > local[1] ||\n        remote[1] === local[1] && remote[2] > local[2];\n\n      if (beta && !available) {\n        // check if stable for beta is available\n        available = remote[0] === local[0] &&\n          remote[1] === local[1] &&\n          remote[2] === local[2];\n      }\n\n      if (beta && !available) {\n        available = next[3] > local[3];\n        showStable = false;\n      }\n\n      if (available) {\n        const version = showStable ? npmVersion : nextVersion;\n        const command = showStable ? 'npm i -g mup' : 'npm i -g mup@next';\n\n        let text = `update available ${pkg.version} => ${version}`;\n        text += `\\nTo update, run ${chalk.green(command)}`;\n        console.log(\n          boxen(text, {\n            padding: 1,\n            margin: 1,\n            align: 'center',\n            borderColor: 'yellow'\n          })\n        );\n      }\n\n      resolve();\n    });\n  });\n}\n"]}