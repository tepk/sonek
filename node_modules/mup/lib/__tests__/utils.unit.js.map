{"version":3,"sources":["../../src/__tests__/utils.unit.js"],"names":["utils","describe","it","list","nodemiral","taskList","executeScript","addStdioHandlers","run","sessions","opts","runCb","runTaskList","then","cb","_taskQueue","verbose","to","equal","undefined","copy","error","catch","needle","haystack","count","countOccurences","result","resolvePath","expected","path","resolve","indexOf","createOption","argvContains","argv","_","config","tail","argvArray","unwanted","filterArgv","deep","follow"],"mappings":"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","file":"utils.unit.js","sourcesContent":["import * as utils from '../utils';\nimport assert from 'assert';\nimport { expect } from 'chai';\nimport nodemiral from 'nodemiral';\nimport path from 'path';\n\ndescribe('utils', () => {\n  describe('addStdioHandlers', () => {\n    it('should add stdio handlers to nodemiral task list', () => {\n      const list = nodemiral.taskList('Test');\n      list.executeScript('testing', {});\n      // Test that it doesn't throw an error\n      utils.addStdioHandlers(list);\n    });\n  });\n\n  describe('runTaskList', () => {\n    it('should resolve when list is sucessfull', cb => {\n      const list = {\n        run(sessions, opts, runCb) {\n          runCb({});\n        }\n      };\n      utils.runTaskList(list, {}, {}).then(() => {\n        cb();\n      });\n    });\n\n    it('should add stdio handlers for verbose', cb => {\n      const list = {\n        _taskQueue: [],\n        run(sessions, opts, runCb) {\n          expect(opts.verbose).to.equal(undefined);\n          runCb({});\n        }\n      };\n\n      utils.runTaskList(list, {}, {verbose: true})\n        .then(() => { cb(); });\n    });\n\n    it('should reject if a task failed', cb => {\n      const list = {\n        run(sessions, opts, runCb) {\n          runCb({\n            copy: {\n              error: 'error'\n            }\n          });\n        }\n      };\n\n      utils.runTaskList(list, {}, {}).catch(() => {\n        cb();\n      });\n    });\n  });\n\n  describe('countOccurences', () => {\n    it('should return the correct count', () => {\n      const needle = 'Meteor';\n      const haystack = 'Production Quality Meteor Deployments. Meteor Up is a command line tool that allows you to deploy any Meteor app to your own server.';\n      const count = utils.countOccurences(needle, haystack);\n      assert(count === 3);\n    });\n  });\n\n  describe('resolvePath', () => {\n    it('should return the correct path', () => {\n      const result = utils.resolvePath('/root', '../opt');\n      const expected = path.resolve('/root', '../opt');\n      assert(result === expected);\n    });\n    it('should expand tilde', () => {\n      const result = utils.resolvePath('~/.ssh');\n      assert(result.indexOf('~') === -1);\n    });\n  });\n\n  describe('createOption', () => {\n    it('should handle long options', () => {\n      const result = utils.createOption('option');\n\n      assert(result === '--option');\n    });\n    it('should handle short options', () => {\n      const result = utils.createOption('o');\n\n      assert(result === '-o');\n    });\n  });\n\n  describe('argvContains', () => {\n    it('should find exact matches', () => {\n      const result = utils.argvContains(['a', 'b'], 'a');\n\n      assert(result);\n    });\n    it('should find matches that contain the value', () => {\n      const result = utils.argvContains(['a', 'b=c'], 'b');\n\n      assert(result);\n    });\n    it('should return false if not found', () => {\n      const result = utils.argvContains(['a', 'b'], 'c');\n\n      assert(!result);\n    });\n  });\n\n  describe('filterArgv', () => {\n    it('should remove unwanted options', () => {\n      const argv = { _: ['logs'], config: './mup.js', tail: true };\n      const argvArray = ['mup', 'logs', '--config=./mup.js', '--tail'];\n      const unwanted = ['_', 'config'];\n      const result = utils.filterArgv(argvArray, argv, unwanted);\n\n      expect(result).to.deep.equal(['logs', '--tail']);\n    });\n    it('should remove undefined and false options', () => {\n      const argv = { _: ['logs'], config: undefined, verbose: true, follow: false};\n      const argvArray = ['mup', 'logs', '--verbose'];\n      const unwanted = ['_'];\n\n      const result = utils.filterArgv(argvArray, argv, unwanted);\n\n      expect(result).to.deep.equal(['logs', '--verbose']);\n    });\n    it('should add non-boolean values', () => {\n      const argv = { _: ['logs'], tail: '10', follow: true };\n      const argvArray = ['mup', 'logs', '--tail=10', '--follow'];\n      const unwanted = ['_'];\n\n      const result = utils.filterArgv(argvArray, argv, unwanted);\n\n      expect(result).to.deep.equal(['logs', '--tail', '10', '--follow']);\n    });\n    it('should remove options not provided by user', () => {\n      const argv = { _: ['logs'], follow: true, tail: '10' };\n      const argvArray = ['mup', 'logs'];\n      const unwanted = ['_'];\n\n      const result = utils.filterArgv(argvArray, argv, unwanted);\n\n      expect(result).to.deep.equal(['logs']);\n    });\n  });\n});\n"]}