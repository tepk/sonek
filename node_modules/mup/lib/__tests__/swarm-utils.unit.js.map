{"version":3,"sources":["../../src/__tests__/swarm-utils.unit.js"],"names":["createServerInfo","servers","reduce","result","options","name","swarm","LocalNodeState","state","Cluster","cluster","describe","it","serverInfo","to","deep","equal","fourServersConfig","one","two","three","four","config","proxy","five"],"mappings":"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","file":"swarm-utils.unit.js","sourcesContent":["import {\n  calculateAdditionalManagers, currentManagers, desiredManagers\n} from '../swarm-utils';\nimport { expect } from 'chai';\n\nfunction createServerInfo(servers) {\n  return servers.reduce((result, options) => {\n    result[options.name] = {\n      swarm: {\n        LocalNodeState: options.state || 'active',\n        Cluster: 'cluster' in options ? options.cluster : {}\n      }\n    };\n\n    return result;\n  }, {});\n}\n\ndescribe('swarm-utils', () => {\n  describe('currentManagers', () => {\n    it('should return active managers', () => {\n      const serverInfo = createServerInfo([{\n        name: 'one'\n      }, {\n        name: 'two',\n        state: 'inactive'\n      }, {\n        name: 'three',\n        cluster: null\n      }]);\n      const result = ['one'];\n\n      expect(currentManagers(serverInfo)).to.deep.equal(result);\n    });\n  });\n  describe('calculateAdditionalManagers', () => {\n    const fourServersConfig = {\n      servers: {\n        one: {},\n        two: {},\n        three: {},\n        four: {}\n      }\n    };\n\n    it('should be at least 1 when no requested managers', () => {\n      const config = {\n        servers: {\n          one: {},\n          two: {}\n        }\n      };\n\n      expect(calculateAdditionalManagers(config)).to.equal(1);\n    });\n    it('should be at least 3 when there is enough servers', () => {\n      expect(calculateAdditionalManagers(fourServersConfig)).to.equal(3);\n    });\n    it('should subtract requested managers', () => {\n      const config = {\n        ...fourServersConfig,\n        proxy: {\n          servers: {\n            one: {}\n          }\n        }\n      };\n\n      expect(calculateAdditionalManagers(config)).to.equal(2);\n    });\n    it('should be odd when enough servers', () => {\n      const config = {\n        servers: { one: {}, two: {}, three: {}, four: {}, five: {}},\n        proxy: {\n          servers: { one: {}, two: {}, three: {}, four: {}}\n        }\n      };\n\n      expect(calculateAdditionalManagers(config)).to.equal(1);\n    });\n    it('should be even when not enough servers', () => {\n      const config = {\n        ...fourServersConfig,\n        proxy: {\n          servers: { one: {}, two: {}, three: {}, four: {}}\n        }\n      };\n\n      expect(calculateAdditionalManagers(config)).to.equal(0);\n    });\n  });\n  describe('desiredManagers', () => {\n    it('should use requested servers', () => {\n      const config = {\n        servers: {one: {}, two: {}},\n        swarm: {},\n        proxy: {\n          servers: {\n            one: {}\n          }\n        }\n      };\n      const result = ['one'];\n\n      expect(desiredManagers(config)).to.deep.equal(result);\n    });\n    it('should have 3 managers if possible', () => {\n      const config = {\n        servers: {\n          one: {},\n          two: {},\n          three: {}\n        }\n      };\n      const serverInfo = createServerInfo([{\n        name: 'one',\n        cluster: null\n      }, {\n        name: 'two',\n        cluster: null\n      }, {\n        name: 'three',\n        cluster: null\n      }]);\n      const result = ['one', 'two', 'three'];\n\n      expect(desiredManagers(config, serverInfo)).to.deep.equal(result);\n    });\n    it('should use existing managers', () => {\n      const config = {\n        servers: {\n          one: {},\n          two: {}\n        }\n      };\n      const serverInfo = createServerInfo([{\n        name: 'one',\n        cluster: null\n      }, {\n        name: 'two'\n      }]);\n\n      const result = ['two'];\n\n      expect(desiredManagers(config, serverInfo)).to.deep.equal(result);\n    });\n  });\n});\n"]}