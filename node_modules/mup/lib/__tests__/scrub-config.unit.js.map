{"version":3,"sources":["../../src/__tests__/scrub-config.unit.js"],"names":["describe","beforeEach","_configScrubbers","length","it","scrubber","to","equal","config","scrubUtils","be","an","utils","ran","result","not","deep","url","expected","scrubUrl"],"mappings":";;AAAA;;AACA;;AAEAA,SAAS,cAAT,EAAyB,YAAM;AAC7BC,aAAW,YAAM;AACfC,kCAAiBC,MAAjB,GAA0B,CAA1B;AACD,GAFD;;AAIAC,KAAG,2BAAH,EAAgC,YAAM;AACpC,QAAMC,WAAW,SAAXA,QAAW,GAAW,CAAG,CAA/B;;AAEA,uCAAiBA,QAAjB;AACA,sBAAOH,8BAAiB,CAAjB,CAAP,EAA4BI,EAA5B,CAA+BC,KAA/B,CAAqCF,QAArC;AACD,GALD;;AAOAD,KAAG,sBAAH,EAA2B,YAAM;AAC/B,QAAMC,WAAW,SAAXA,QAAW,CAASG,MAAT,EAAiBC,UAAjB,EAA6B;AAC5C,wBAAOD,MAAP,EAAeF,EAAf,CAAkBI,EAAlB,CAAqBC,EAArB,CAAwB,QAAxB;AACA,wBAAOF,UAAP,EAAmBH,EAAnB,CAAsBC,KAAtB,CAA4BK,kBAA5B;;AAEAJ,aAAOK,GAAP,GAAa,IAAb;;AAEA,aAAOL,MAAP;AACD,KAPD;;AASA,uCAAiBH,QAAjB;AACA,QAAMG,SAAS,EAAEK,KAAK,KAAP,EAAf;AACA,QAAMC,SAAS,8BAAYN,MAAZ,CAAf;AACA,sBAAOM,MAAP,EAAeR,EAAf,CAAkBS,GAAlB,CAAsBR,KAAtB,CAA4BC,MAA5B;AACA,sBAAOM,MAAP,EAAeR,EAAf,CAAkBU,IAAlB,CAAuBT,KAAvB,CAA6B,EAAEM,KAAK,IAAP,EAA7B;AACD,GAfD;AAgBAb,WAAS,gBAAT,EAA2B,YAAM;AAC/BI,OAAG,+CAAH,EAAoD,YAAM;AACxD,UAAMa,MAAM,uBAAZ;AACA,UAAMC,WAAW,kBAAjB;;AAEA,wBAAON,mBAAMO,QAAN,CAAeF,GAAf,CAAP,EAA4BX,EAA5B,CAA+BC,KAA/B,CAAqCW,QAArC;AACD,KALD;AAMAd,OAAG,oBAAH,EAAyB,YAAM;AAC7B,UAAMa,MAAM,+BAAZ;AACA,UAAMC,WAAW,4BAAjB;;AAEA,wBAAON,mBAAMO,QAAN,CAAeF,GAAf,CAAP,EAA4BX,EAA5B,CAA+BC,KAA/B,CAAqCW,QAArC;AACD,KALD;AAMAd,OAAG,kCAAH,EAAuC,YAAM;AAC3C,UAAMa,MAAM,yCAAZ;AACA,UAAMC,WAAW,oCAAjB;;AAEA,wBAAON,mBAAMO,QAAN,CAAeF,GAAf,CAAP,EAA4BX,EAA5B,CAA+BC,KAA/B,CAAqCW,QAArC;AACD,KALD;AAMAd,OAAG,0BAAH,EAA+B,YAAM;AACnC,UAAMa,MAAM,+BAAZ;AACA,UAAMC,WAAW,sCAAjB;;AAEA,wBAAON,mBAAMO,QAAN,CAAeF,GAAf,CAAP,EAA4BX,EAA5B,CAA+BC,KAA/B,CAAqCW,QAArC;AACD,KALD;AAMD,GAzBD;AA0BD,CAtDD","file":"scrub-config.unit.js","sourcesContent":["import { _configScrubbers, registerScrubber, scrubConfig, utils } from '../scrub-config';\nimport { expect } from 'chai';\n\ndescribe('scrub-config', () => {\n  beforeEach(() => {\n    _configScrubbers.length = 0;\n  });\n\n  it('should register scrubbers', () => {\n    const scrubber = function() { };\n\n    registerScrubber(scrubber);\n    expect(_configScrubbers[0]).to.equal(scrubber);\n  });\n\n  it('should run scrubbers', () => {\n    const scrubber = function(config, scrubUtils) {\n      expect(config).to.be.an('object');\n      expect(scrubUtils).to.equal(utils);\n\n      config.ran = true;\n\n      return config;\n    };\n\n    registerScrubber(scrubber);\n    const config = { ran: false };\n    const result = scrubConfig(config);\n    expect(result).to.not.equal(config);\n    expect(result).to.deep.equal({ ran: true });\n  });\n  describe('utils.scrubUrl', () => {\n    it('should change host and keep protocol and port', () => {\n      const url = 'https://meteor-up.com';\n      const expected = 'https://host.com';\n\n      expect(utils.scrubUrl(url)).to.equal(expected);\n    });\n    it('should change auth', () => {\n      const url = 'https://abc:123@meteor-up.com';\n      const expected = 'https://user:pass@host.com';\n\n      expect(utils.scrubUrl(url)).to.equal(expected);\n    });\n    it('should keep port, path, and hash', () => {\n      const url = 'https://meteor-up.com:3000/docs#plugins';\n      const expected = 'https://host.com:3000/docs#plugins';\n\n      expect(utils.scrubUrl(url)).to.equal(expected);\n    });\n    it('should change subdomains', () => {\n      const url = 'https://abc.xyz.meteor-up.com';\n      const expected = 'https://subdomain.subdomain.host.com';\n\n      expect(utils.scrubUrl(url)).to.equal(expected);\n    });\n  });\n});\n"]}