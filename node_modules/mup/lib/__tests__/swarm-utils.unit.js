'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _swarmUtils = require('../swarm-utils');

var _chai = require('chai');

function createServerInfo(servers) {
  return servers.reduce(function (result, options) {
    result[options.name] = {
      swarm: {
        LocalNodeState: options.state || 'active',
        Cluster: 'cluster' in options ? options.cluster : {}
      }
    };

    return result;
  }, {});
}

describe('swarm-utils', function () {
  describe('currentManagers', function () {
    it('should return active managers', function () {
      var serverInfo = createServerInfo([{
        name: 'one'
      }, {
        name: 'two',
        state: 'inactive'
      }, {
        name: 'three',
        cluster: null
      }]);
      var result = ['one'];

      (0, _chai.expect)((0, _swarmUtils.currentManagers)(serverInfo)).to.deep.equal(result);
    });
  });
  describe('calculateAdditionalManagers', function () {
    var fourServersConfig = {
      servers: {
        one: {},
        two: {},
        three: {},
        four: {}
      }
    };

    it('should be at least 1 when no requested managers', function () {
      var config = {
        servers: {
          one: {},
          two: {}
        }
      };

      (0, _chai.expect)((0, _swarmUtils.calculateAdditionalManagers)(config)).to.equal(1);
    });
    it('should be at least 3 when there is enough servers', function () {
      (0, _chai.expect)((0, _swarmUtils.calculateAdditionalManagers)(fourServersConfig)).to.equal(3);
    });
    it('should subtract requested managers', function () {
      var config = _extends({}, fourServersConfig, {
        proxy: {
          servers: {
            one: {}
          }
        }
      });

      (0, _chai.expect)((0, _swarmUtils.calculateAdditionalManagers)(config)).to.equal(2);
    });
    it('should be odd when enough servers', function () {
      var config = {
        servers: { one: {}, two: {}, three: {}, four: {}, five: {} },
        proxy: {
          servers: { one: {}, two: {}, three: {}, four: {} }
        }
      };

      (0, _chai.expect)((0, _swarmUtils.calculateAdditionalManagers)(config)).to.equal(1);
    });
    it('should be even when not enough servers', function () {
      var config = _extends({}, fourServersConfig, {
        proxy: {
          servers: { one: {}, two: {}, three: {}, four: {} }
        }
      });

      (0, _chai.expect)((0, _swarmUtils.calculateAdditionalManagers)(config)).to.equal(0);
    });
  });
  describe('desiredManagers', function () {
    it('should use requested servers', function () {
      var config = {
        servers: { one: {}, two: {} },
        swarm: {},
        proxy: {
          servers: {
            one: {}
          }
        }
      };
      var result = ['one'];

      (0, _chai.expect)((0, _swarmUtils.desiredManagers)(config)).to.deep.equal(result);
    });
    it('should have 3 managers if possible', function () {
      var config = {
        servers: {
          one: {},
          two: {},
          three: {}
        }
      };
      var serverInfo = createServerInfo([{
        name: 'one',
        cluster: null
      }, {
        name: 'two',
        cluster: null
      }, {
        name: 'three',
        cluster: null
      }]);
      var result = ['one', 'two', 'three'];

      (0, _chai.expect)((0, _swarmUtils.desiredManagers)(config, serverInfo)).to.deep.equal(result);
    });
    it('should use existing managers', function () {
      var config = {
        servers: {
          one: {},
          two: {}
        }
      };
      var serverInfo = createServerInfo([{
        name: 'one',
        cluster: null
      }, {
        name: 'two'
      }]);

      var result = ['two'];

      (0, _chai.expect)((0, _swarmUtils.desiredManagers)(config, serverInfo)).to.deep.equal(result);
    });
  });
});
//# sourceMappingURL=swarm-utils.unit.js.map