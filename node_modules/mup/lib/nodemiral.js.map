{"version":3,"sources":["../src/nodemiral.js"],"names":["copy","session","_options","callback","options","retries","hostVars","_host","vars","doCopy","src","dest","cb","err","message","solution","timeout","console","log","setTimeout","executeScript","varsMapper","script","createCallback","code","logs","stderr","stdout","substring","length","Error","nodemiral","registerTask"],"mappings":";;;;AAAA;;AACA;;;;;;AAEA,SAASA,IAAT,CAAcC,OAAd,EAAuBC,QAAvB,EAAiCC,QAAjC,EAA2C;AACzC,MAAMC,UAAU,mBAAMF,QAAN,CAAhB;AACA,MAAIG,UAAU,CAAd;;AAEA,MAAI,QAAOD,QAAQE,QAAf,MAA4B,QAA5B,IAAwCF,QAAQE,QAAR,CAAiBL,QAAQM,KAAzB,CAA5C,EAA6E;AAC3EH,YAAQI,IAAR,GAAe,mBAAMJ,QAAQI,IAAd,EAAoBJ,QAAQE,QAAR,CAAiBL,QAAQM,KAAzB,CAApB,CAAf;AACD;;AAED,WAASE,MAAT,GAAkB;AAChBR,YAAQD,IAAR,CAAaI,QAAQM,GAArB,EAA0BN,QAAQO,IAAlC,EAAwCP,OAAxC,EAAiDQ,EAAjD;AACD;AACD,WAASA,EAAT,CAAYC,GAAZ,EAAiB;AACf;AACA,QAAIA,GAAJ,EAAS;AACP,UAAIA,IAAIC,OAAJ,KAAgB,cAApB,EAAoC;AAClCD,YAAIE,QAAJ,GAAe,iEAAf;;AAEA;AACAV,kBAAU,EAAV;AACD;AACF;;AAEDA,eAAW,CAAX;;AAEA,QAAIQ,OAAOR,UAAU,CAArB,EAAwB;AACtB,UAAMW,UAAUX,UAAU,IAA1B;;AAEAY,cAAQC,GAAR,CAAY,sBAAZ,EAAoCL,IAAIC,OAAxC;AACAG,cAAQC,GAAR,kBAA2BF,UAAU,IAArC;;AAEAG,iBAAWV,MAAX,EAAmBO,OAAnB;;AAEA;AACD;AACDb,aAASU,GAAT;AACD;;AAEDJ;AACD;;AAED,SAASW,aAAT,CAAuBnB,OAAvB,EAAgCC,QAAhC,EAA0CC,QAA1C,EAAoDkB,UAApD,EAAgE;AAC9D,MAAMjB,UAAU,mBAAMF,QAAN,CAAhB;AACA,MAAI,QAAOE,QAAQE,QAAf,MAA4B,QAA5B,IAAwCF,QAAQE,QAAR,CAAiBL,QAAQM,KAAzB,CAA5C,EAA6E;AAC3EH,YAAQI,IAAR,GAAe,mBAAMJ,QAAQI,IAAd,EAAoBJ,QAAQE,QAAR,CAAiBL,QAAQM,KAAzB,CAApB,CAAf;AACD;;AAEDN,UAAQmB,aAAR,CACEhB,QAAQkB,MADV,EAEElB,OAFF,EAGEmB,eAAepB,QAAf,EAAyBkB,UAAzB,CAHF;AAKD;;AAED,SAASE,cAAT,CAAwBX,EAAxB,EAA4BS,UAA5B,EAAwC;AACtC,SAAO,UAASR,GAAT,EAAcW,IAAd,EAA+B;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AACpCA,SAAKC,MAAL,GAAcD,KAAKC,MAAL,IAAe,EAA7B;AACAD,SAAKE,MAAL,GAAcF,KAAKE,MAAL,IAAe,EAA7B;;AAEA,QAAId,GAAJ,EAAS;AACP,aAAOD,GAAGC,GAAH,CAAP;AACD;AACD,QAAIW,OAAO,CAAX,EAAc;AACZ,UAAMV,6GAEJW,KAAKC,MAAL,CAAYE,SAAZ,CAAsBH,KAAKC,MAAL,CAAYG,MAAZ,GAAqB,IAA3C,CAFI,sGAIJJ,KAAKE,MAAL,CAAYC,SAAZ,CAAsBH,KAAKE,MAAL,CAAYE,MAAZ,GAAqB,IAA3C,CAJI,mGAAN;;AAQA,aAAOjB,GAAG,IAAIkB,KAAJ,CAAUhB,OAAV,CAAH,CAAP;AACD;;AAED,QAAIO,UAAJ,EAAgB;AACdA,iBAAWI,KAAKE,MAAhB,EAAwBF,KAAKC,MAA7B;AACD;;AAEDd;AACD,GAxBD;AAyBD;;AAEDmB,oBAAUC,YAAV,CAAuB,MAAvB,EAA+BhC,IAA/B;AACA+B,oBAAUC,YAAV,CAAuB,eAAvB,EAAwCZ,aAAxC","file":"nodemiral.js","sourcesContent":["import { clone, merge } from 'lodash';\nimport nodemiral from 'nodemiral';\n\nfunction copy(session, _options, callback) {\n  const options = clone(_options);\n  let retries = 0;\n\n  if (typeof options.hostVars === 'object' && options.hostVars[session._host]) {\n    options.vars = merge(options.vars, options.hostVars[session._host]);\n  }\n\n  function doCopy() {\n    session.copy(options.src, options.dest, options, cb);\n  }\n  function cb(err) {\n    // Check if common error that a known fix\n    if (err) {\n      if (err.message === 'No such file') {\n        err.solution = 'Please run \"mup setup\" to create missing folders on the server.';\n\n        // Skip retries since we will have the same error\n        retries = 10;\n      }\n    }\n\n    retries += 1;\n\n    if (err && retries < 4) {\n      const timeout = retries * 3000;\n\n      console.log('Failed to copy file ', err.message);\n      console.log(`Retrying in ${timeout / 1000} seconds`);\n\n      setTimeout(doCopy, timeout);\n\n      return;\n    }\n    callback(err);\n  }\n\n  doCopy();\n}\n\nfunction executeScript(session, _options, callback, varsMapper) {\n  const options = clone(_options);\n  if (typeof options.hostVars === 'object' && options.hostVars[session._host]) {\n    options.vars = merge(options.vars, options.hostVars[session._host]);\n  }\n\n  session.executeScript(\n    options.script,\n    options,\n    createCallback(callback, varsMapper)\n  );\n}\n\nfunction createCallback(cb, varsMapper) {\n  return function(err, code, logs = {}) {\n    logs.stderr = logs.stderr || '';\n    logs.stdout = logs.stdout || '';\n\n    if (err) {\n      return cb(err);\n    }\n    if (code > 0) {\n      const message = `\n      ------------------------------------STDERR------------------------------------\n      ${logs.stderr.substring(logs.stderr.length - 4200)}\n      ------------------------------------STDOUT------------------------------------\n      ${logs.stdout.substring(logs.stdout.length - 4200)}\n      ------------------------------------------------------------------------------\n      `;\n\n      return cb(new Error(message));\n    }\n\n    if (varsMapper) {\n      varsMapper(logs.stdout, logs.stderr);\n    }\n\n    cb();\n  };\n}\n\nnodemiral.registerTask('copy', copy);\nnodemiral.registerTask('executeScript', executeScript);\n"]}