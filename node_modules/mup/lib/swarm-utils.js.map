{"version":3,"sources":["../src/swarm-utils.js"],"names":["hostsToServer","currentManagers","desiredManagers","findNodes","nodeIdsToServer","currentLabels","log","config","hosts","servers","result","Object","keys","forEach","server","key","indexOf","host","push","serverInfo","swarm","LocalNodeState","Cluster","managers","additionalManagers","length","current","diff","_","difference","managersToAdd","splice","nodes","manager","ids","reduce","id","NodeID","nodeHosts","swarmNodes","map","node","ID","hostToServer","allIds","info","idToHost","Array","nodeHost","Spec","Labels"],"mappings":"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","file":"swarm-utils.js","sourcesContent":["import _ from 'lodash';\nimport debug from 'debug';\nimport { getOptions } from './swarm-options';\n\nconst log = debug('mup:swarm-utils');\n\nexport function hostsToServer(config, hosts) {\n  const servers = config.servers;\n  const result = [];\n\n  Object.keys(servers).forEach(key => {\n    const server = servers[key];\n\n    if (hosts.indexOf(server.host) > -1) {\n      result.push(key);\n    }\n  });\n\n  return result;\n}\n\nexport function currentManagers(config, serverInfo) {\n  const hosts = [];\n\n  // TODO: handle managers from multiple clusters.\n\n  Object.keys(serverInfo).forEach(key => {\n    const server = serverInfo[key];\n\n    if (\n      server.swarm &&\n      server.swarm.LocalNodeState !== 'inactive' &&\n      server.swarm.Cluster\n    ) {\n      hosts.push(key);\n    }\n  });\n\n\n  const result = hostsToServer(config, hosts);\n\n  log('current managers', result);\n\n  return result;\n}\n\nexport function desiredManagers(config, serverInfo) {\n  const { managers } = getOptions(config);\n  const servers = Object.keys(config.servers);\n  let additionalManagers = 0;\n\n  log('requrested managers', managers);\n\n  // Try to get an odd number of managers\n  if (managers.length % 2 === 0 && managers.length < servers.length) {\n    additionalManagers = 1;\n  }\n\n  // When there are enough servers, make sure there are\n  // at least 3 managers, since it can then handle one manager\n  // going down\n  if (servers.length >= 3 && managers.length < 3) {\n    additionalManagers = 3 - managers.length;\n  }\n\n  log('additional managers', additionalManagers);\n\n  if (additionalManagers > 0) {\n    const current = currentManagers(config, serverInfo);\n    const diff = _.difference(current, managers);\n    const managersToAdd = diff.splice(0, additionalManagers);\n\n    log('managers to add', managersToAdd);\n    additionalManagers -= managersToAdd.length;\n    managers.push(...managersToAdd);\n  }\n\n  if (additionalManagers > 0) {\n    const diff = _.difference(Object.keys(config.servers), managers);\n    const managersToAdd = diff.splice(0, additionalManagers);\n    log('random servers to add', managersToAdd);\n    managers.push(...managersToAdd);\n  }\n\n  log('desired managers', managers);\n\n  return managers;\n}\n\nexport function findNodes(config, serverInfo) {\n  const nodes = [];\n  const managers = currentManagers(config, serverInfo);\n\n  if (managers.length === 0) {\n    return nodes;\n  }\n\n  // TODO: handle nodes that aren't listed in the config.server\n  // TODO: handle multiple clusters\n\n  const manager = config.servers[managers[0]].host;\n  const ids = Object.keys(serverInfo).reduce((result, host) => {\n    if (serverInfo[host].swarm) {\n      const id = serverInfo[host].swarm.NodeID;\n      result[id] = host;\n    }\n\n    return result;\n  }, {});\n\n  const nodeHosts = serverInfo[manager].swarmNodes.map(node => ids[node.ID]);\n\n\n  return hostsToServer(config, nodeHosts);\n}\n\nexport function nodeIdsToServer(config, serverInfo) {\n  const hostToServer = Object.keys(config.servers).reduce((result, key) => {\n    result[config.servers[key].host] = key;\n\n    return result;\n  }, {});\n\n  const allIds = [];\n  const result = {};\n\n  Object.keys(serverInfo).forEach(host => {\n    if (serverInfo[host].swarm) {\n      result[serverInfo[host].swarm.NodeID] = hostToServer[host];\n    }\n    if (serverInfo[host].swarmNodes) {\n      const nodes = serverInfo[host].swarmNodes;\n      allIds.push(...nodes.map(node => node.ID));\n    }\n  });\n\n  allIds.forEach(id => {\n    if (!(id in result)) {\n      // This node isn't listed in config.servers\n      result[id] = null;\n    }\n  });\n\n  return result;\n}\n\nexport function currentLabels(config, info) {\n  const result = {};\n  const idToHost = nodeIdsToServer(config, info);\n\n  Object.keys(info).forEach(host => {\n    if (info[host].swarmNodes instanceof Array) {\n      info[host].swarmNodes.forEach(node => {\n        const nodeHost = idToHost[node.ID];\n\n        // Check if it is a server mup has access to\n        if (nodeHost === null) {\n          return;\n        }\n\n        result[nodeHost] = node.Spec.Labels;\n      });\n    }\n  });\n\n  return result;\n}\n"]}