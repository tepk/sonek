{"version":3,"sources":["../../src/tasks/index.js"],"names":["addCreateService","addUpdateService","addCreateOrUpdateService","addStopService","addRestartService","escapeEnv","env","Array","map","_env","value","Object","keys","reduce","result","key","taskList","image","name","publishedPort","targetPort","envFile","hostname","mode","replicas","constraints","endpointMode","networks","updateFailureAction","updateParallelism","updateDelay","executeScript","script","__dirname","vars","diffEnv","wantedEnv","_currentEnv","toAdd","toRemove","currentEnv","split","entries","toString","push","envAdd","envRemove","ifChanged","current","compareValue","newValue","console","log","currentService","Spec","EndpointSpec","TaskTemplate","UpdateConfig","containerSpec","ContainerSpec","Env","Image","Hostname","Mode","FailureAction","Delay","Parallelism","tasklist","options"],"mappings":"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","file":"index.js","sourcesContent":["import { monitorServiceProgress } from './monitor-service';\nimport { resolvePath } from '../utils';\nimport shellEscape from 'shell-escape';\n\nfunction escapeEnv(env) {\n  if (env instanceof Array) {\n    return env.map(_env => {\n      _env.value = shellEscape([_env.value]);\n\n      return _env;\n    });\n  }\n\n  return Object.keys(env).reduce((result, key) => {\n    result[key] = shellEscape([env[key]]);\n\n    return result;\n  }, {});\n}\n\nexport function addCreateService(taskList, {\n  image,\n  name,\n  publishedPort,\n  targetPort,\n  envFile,\n  env,\n  hostname,\n  mode = 'replicated',\n  replicas,\n  constraints = [],\n  endpointMode = 'vip',\n  networks = [],\n  updateFailureAction = 'rollback',\n  updateParallelism = 0,\n  updateDelay = 0\n  // bind,\n  // log,\n  // volumes,\n  // docker,\n  // hostLabels\n} = {}) {\n  taskList.executeScript(`Start2 ${name}`, {\n    script: resolvePath(__dirname, 'assets/create-service.sh'),\n    vars: {\n      name,\n      publishedPort,\n      targetPort,\n      envFile,\n      env: escapeEnv(env),\n      image,\n      replicas,\n      hostname,\n      mode,\n      endpointMode,\n      networks,\n      updateFailureAction,\n      updateParallelism,\n      updateDelay: `${updateDelay / 1000}s`,\n      constraints\n    }\n  });\n\n  return taskList;\n  // return monitorServiceProgress(taskList);\n}\n\nfunction diffEnv(wantedEnv, _currentEnv) {\n  const toAdd = [];\n  const toRemove = [];\n\n  const currentEnv = _currentEnv.reduce((result, env) => {\n    const [name, value] = env.split('=');\n\n    result[name] = value;\n\n    return result;\n  }, {});\n\n  for (const [name, value] of Object.entries(wantedEnv)) {\n    if (!(name in currentEnv) || currentEnv[name] !== value.toString()) {\n      toAdd.push({name, value});\n    }\n  }\n\n  for (const [name] of Object.entries(currentEnv)) {\n    if (!(name in wantedEnv)) {\n      toRemove.push({name});\n    }\n  }\n\n  return {\n    envAdd: toAdd,\n    envRemove: toRemove\n  };\n}\n\nfunction ifChanged(current, compareValue, newValue) {\n  if (current !== compareValue) {\n    console.log(current, compareValue, newValue);\n\n    return typeof newValue === 'undefined' ? compareValue : newValue;\n  }\n\n  return null;\n}\n\nexport function addUpdateService(taskList, {\n  name,\n  image,\n  env,\n  hostname,\n  endpointMode,\n  updateFailureAction,\n  updateParallelism,\n  updateDelay\n}, currentService) {\n  const {\n    EndpointSpec,\n    TaskTemplate,\n    UpdateConfig\n  } = currentService.Spec;\n  const containerSpec = TaskTemplate.ContainerSpec;\n  const {\n    envAdd,\n    envRemove\n  } = diffEnv(env, containerSpec.Env);\n\n  // TODO: skip running the script if there is nothing to update\n  taskList.executeScript(`Update ${name}`, {\n    script: resolvePath(__dirname, 'assets/update-service.sh'),\n    vars: {\n      image: ifChanged(containerSpec.Image, image),\n      hostname: ifChanged(containerSpec.Hostname, hostname),\n      envAdd: escapeEnv(envAdd),\n      envRemove,\n      name,\n      endpointMode: ifChanged(EndpointSpec.Mode, endpointMode),\n      updateFailureAction: ifChanged(\n        UpdateConfig.FailureAction, updateFailureAction\n      ),\n      updateDelay: ifChanged(\n        UpdateConfig.Delay, updateDelay * 1000000, updateDelay\n      ),\n      updateParallelism: ifChanged(UpdateConfig.Parallelism, updateParallelism)\n    }\n  });\n\n  return taskList;\n  // return monitorServiceProgress(taskList);\n}\n\nexport function addCreateOrUpdateService(tasklist, options, currentService) {\n  if (currentService) {\n    return addUpdateService(tasklist, options, currentService);\n  }\n\n  return addCreateService(tasklist, options);\n}\n\nexport function addStopService(taskList, { name }) {\n  taskList.executeScript(`Stop ${name}`, {\n    script: resolvePath(__dirname, 'assets/stop-service.sh'),\n    vars: {\n      name\n    }\n  });\n\n  return taskList;\n}\n\nexport function addRestartService(taskList, { name }) {\n  taskList.executeScript(`Restart ${name}`, {\n    script: resolvePath(__dirname, 'assets/restart-service.sh'),\n    vars: {\n      name\n    }\n  });\n}\n"]}