{"version":3,"sources":["../src/index.js"],"names":["unwantedArgvs","addModuleCommands","builder","module","moduleName","Object","keys","commands","forEach","command","commandName","name","description","commandWrapper","pluginName","then","rawArgv","process","argv","slice","filteredArgv","yargs","api","MupAPI","cwd","potentialPromise","runCommand","e","_commandErrorHandler","catch","console","error","preAPI","config","getConfig","plugins","Array","appPath","app","path","absoluteAppPath","resolvePath","base","map","plugin","configPath","hooks","key","program","usage","chalk","yellow","version","pkg","alias","global","option","requiresArg","string","boolean","strict","epilogue","help","modules","subYargs","showHelp","_","length"],"mappings":"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","file":"index.js","sourcesContent":["import './node-version';\nimport './nodemiral';\nimport modules, { loadPlugins, locatePluginDir } from './load-plugins';\nimport chalk from 'chalk';\nimport checkUpdates from './updates';\nimport { filterArgv } from './utils';\nimport MupAPI from './plugin-api';\nimport pkg from '../package.json';\nimport { registerHook } from './hooks';\nimport yargs from 'yargs';\n\nconst unwantedArgvs = ['_', '$0', 'settings', 'config', 'verbose', 'show-hook-names', 'help', 'servers'];\n\nfunction addModuleCommands(builder, module, moduleName) {\n  Object.keys(module.commands).forEach(commandName => {\n    const command = module.commands[commandName];\n    command.builder = command.builder || {};\n\n    builder.command(\n      command.name || commandName,\n      command.description,\n      command.builder,\n      commandWrapper(moduleName, commandName)\n    );\n  });\n}\n\nfunction commandWrapper(pluginName, commandName) {\n  return function() {\n    checkUpdates()\n      .then(() => {\n        const rawArgv = process.argv.slice(2);\n        const filteredArgv = filterArgv(rawArgv, yargs.argv, unwantedArgvs);\n        const api = new MupAPI(process.cwd(), filteredArgv, yargs.argv);\n        let potentialPromise;\n\n        try {\n          potentialPromise = api.runCommand(`${pluginName}.${commandName}`);\n        } catch (e) {\n          api._commandErrorHandler(e);\n        }\n\n        if (potentialPromise && typeof potentialPromise.then === 'function') {\n          potentialPromise.catch(api._commandErrorHandler);\n        }\n      })\n      .catch(e => {\n        console.error(e);\n      });\n  };\n}\n\n// Load config before creating commands\nconst preAPI = new MupAPI(process.cwd(), process.argv, yargs.argv);\nconst config = preAPI.getConfig(false);\n\n// Load plugins\nif (config.plugins instanceof Array) {\n  const appPath = config.app && config.app.path ? config.app.path : '';\n  const absoluteAppPath = preAPI.resolvePath(preAPI.base, appPath);\n\n  loadPlugins(\n    config.plugins.map(plugin => ({\n      name: plugin,\n      path: locatePluginDir(plugin, preAPI.configPath, absoluteAppPath)\n    }))\n  );\n}\n\n// Load hooks\nif (config.hooks) {\n  Object.keys(config.hooks).forEach(key => {\n    registerHook(key, config.hooks[key]);\n  });\n}\n\nlet program = yargs\n  .usage(`\\nUsage: ${chalk.yellow('mup')} <command> [args]`)\n  .version(pkg.version)\n  .alias('version', 'V')\n  .global('version', false)\n  .option('settings', {\n    description: 'Path to Meteor settings file',\n    requiresArg: true,\n    string: true\n  })\n  .option('config', {\n    description: 'Path to mup.js config file',\n    requiresArg: true,\n    string: true\n  })\n  .option('servers', {\n    description: 'Comma separated list of servers to use',\n    requiresArg: true,\n    string: true\n  })\n  .option('verbose', {\n    description: 'Print output from build and server scripts',\n    boolean: true\n  })\n  .option('show-hook-names', {\n    description: 'Prints names of the available hooks as the command runs',\n    boolean: true\n  })\n  .strict(true)\n  .alias('help', 'h')\n  .epilogue(\n    'For more information, read the docs at http://meteor-up.com/docs.html'\n  )\n  .help('help');\n\nObject.keys(modules).forEach(moduleName => {\n  if (moduleName !== 'default' && modules[moduleName].commands) {\n    yargs.command(\n      moduleName,\n      modules[moduleName].description,\n      subYargs => {\n        addModuleCommands(subYargs, modules[moduleName], moduleName);\n      },\n      () => {\n        yargs.showHelp('log');\n      }\n    );\n  } else if (moduleName === 'default') {\n    addModuleCommands(yargs, modules[moduleName], moduleName);\n  }\n});\n\nprogram = program.argv;\n\nif (program._.length === 0) {\n  yargs.showHelp();\n}\n"]}